{"version":3,"file":"create-emit-callback.js","sourceRoot":"","sources":["../../../src/lib/ngc/create-emit-callback.ts"],"names":[],"mappings":";AAAA,wFAAwF;AACxF,0EAA0E;AAC1E,uIAAuI;;;AAEvI;;;;;;GAMG;AAEH,4IAA4I;AAC5I,MAAM,eAAe,GAAG,oEAAoE,CAAC;AAK7F,kGAAkG;AAClG,SAAgB,kBAAkB,CAAC,OAA4B;IAC7D,MAAM,mBAAmB,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,YAAY,CAAC;IACzF,MAAM,uBAAuB,GAAG,OAAO,CAAC,0BAA0B,CAAC;IACnE,IAAI,CAAC,mBAAmB,IAAI,CAAC,uBAAuB,EAAE;QACpD,OAAO,SAAS,CAAC;KAClB;IAED,IAAI,OAAO,CAAC,0BAA0B,IAAI,OAAO,CAAC,aAAa,KAAK,eAAe,EAAE;QACnF,IAAI,mBAAmB,EAAE;YACvB,mFAAmF;YACnF,iEAAiE;YACjE,mCAAmC;YACnC,OAAO,CAAC,qBAAqB,GAAG,IAAI,CAAC;SACtC;QAED,MAAM,WAAW,GAWb;YACF,2BAA2B,EAAE,QAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC;YACpG,gBAAgB,EAAE,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,CAAC,EAAE;YAC/C,2BAA2B,EAAE,SAAS,CAAC,EAAE,CAAC,KAAK;YAC/C,kBAAkB,EAAE,QAAQ,CAAC,EAAE,CAAC,QAAQ;YACxC,UAAU,EAAE,KAAK;YACjB,OAAO,EAAE,IAAI;YACb,2BAA2B,EAAE,KAAK;YAClC,mBAAmB;YACnB,uBAAuB;SACxB,CAAC;QAEF,OAAO,CAAC,EACN,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB,kBAAkB,GAAG,EAAE,EACvB,IAAI,EACJ,OAAO,GACR,EAAE,EAAE;QACH,kFAAkF;QAClF,OAAO,CAAC,SAAS,CAAC,CAAC,eAAe,CAChC,OAAO,kCACF,WAAW,KAAE,OAAO,EAAE,IAAI,EAAE,oBAAoB,EAAE,IAAI,KAC3D,IAAI,EACJ,OAAO,EACP,gBAAgB,EAChB,SAAS,EACT,iBAAiB,EACjB,gBAAgB,EAChB;YACE,QAAQ,EAAE,kBAAkB,CAAC,MAAM;YACnC,OAAO,EAAE,kBAAkB,CAAC,KAAK;SAClC,CACF,CAAC;KACL;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAlED,gDAkEC","sourcesContent":["// XX: internal in ngc's `main()`, a tsickle emit callback is passed to the tsc compiler\n// ... blatantly copy-paste the emit callback here. it's not a public api.\n// ... @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/main.ts#L36-L38\n\n/*\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n// @link https://github.com/angular/angular/blob/24bf3e2a251634811096b939e61d63297934579e/packages/compiler-cli/src/transformers/util.ts#L14\nconst GENERATED_FILES = /(.*?)\\.(ngfactory|shim\\.ngstyle|ngstyle|ngsummary)\\.(js|d\\.ts|ts)$/;\n\nimport * as tsickle from 'tsickle';\nimport * as api from '@angular/compiler-cli/src/transformers/api';\n\n// @link https://github.com/angular/angular/blob/83d207d/packages/compiler-cli/src/main.ts#L42-L84\nexport function createEmitCallback(options: api.CompilerOptions): api.TsEmitCallback | undefined {\n  const transformDecorators = !options.enableIvy && options.annotationsAs !== 'decorators';\n  const transformTypesToClosure = options.annotateForClosureCompiler;\n  if (!transformDecorators && !transformTypesToClosure) {\n    return undefined;\n  }\n\n  if (options.annotateForClosureCompiler || options.annotationsAs === 'static fields') {\n    if (transformDecorators) {\n      // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n      // Otherwise tsickle might emit references to non imported values\n      // as TypeScript elided the import.\n      options.emitDecoratorMetadata = true;\n    }\n\n    const tsickleHost: Pick<\n      tsickle.TsickleHost,\n      | 'shouldSkipTsickleProcessing'\n      | 'pathToModuleName'\n      | 'shouldIgnoreWarningsForPath'\n      | 'fileNameToModuleId'\n      | 'googmodule'\n      | 'untyped'\n      | 'convertIndexImportShorthand'\n      | 'transformDecorators'\n      | 'transformTypesToClosure'\n    > = {\n      shouldSkipTsickleProcessing: fileName => /\\.d\\.ts$/.test(fileName) || GENERATED_FILES.test(fileName),\n      pathToModuleName: (_context, _importPath) => '',\n      shouldIgnoreWarningsForPath: _filePath => false,\n      fileNameToModuleId: fileName => fileName,\n      googmodule: false,\n      untyped: true,\n      convertIndexImportShorthand: false,\n      transformDecorators,\n      transformTypesToClosure,\n    };\n\n    return ({\n      program,\n      targetSourceFile,\n      writeFile,\n      cancellationToken,\n      emitOnlyDtsFiles,\n      customTransformers = {},\n      host,\n      options,\n    }) =>\n      // tslint:disable-next-line:no-require-imports only depend on tsickle if requested\n      require('tsickle').emitWithTsickle(\n        program,\n        { ...tsickleHost, options, host, moduleResolutionHost: host },\n        host,\n        options,\n        targetSourceFile,\n        writeFile,\n        cancellationToken,\n        emitOnlyDtsFiles,\n        {\n          beforeTs: customTransformers.before,\n          afterTs: customTransformers.after,\n        },\n      );\n  }\n\n  return undefined;\n}\n"]}