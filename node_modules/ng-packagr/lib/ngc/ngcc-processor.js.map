{"version":3,"file":"ngcc-processor.js","sourceRoot":"","sources":["../../../src/lib/ngc/ngcc-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger, process as mainNgcc, LogLevel } from '@angular/compiler-cli/ngcc';\nimport { existsSync, constants, accessSync } from 'fs';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport * as log from '../utils/log';\nimport { EntryPointNode, ngUrl } from '../ng-package/nodes';\n\n// Transform a package and its typings when NGTSC is resolving a module.\nexport class NgccProcessor {\n  private _processedModules = new Set<string>();\n  private _logger: NgccLogger;\n  private _nodeModulesDirectory: string;\n  private _entryPointsUrl: string[];\n\n  constructor(\n    private projectPath: string,\n    private readonly compilerOptions: ts.CompilerOptions,\n    private readonly entryPoints: EntryPointNode[],\n  ) {\n    this._entryPointsUrl = this.entryPoints.map(({ url }) => ngUrl(url));\n\n    const { baseUrl } = this.compilerOptions;\n    this._nodeModulesDirectory = this.findNodeModulesDirectory(baseUrl);\n  }\n\n  processModule(moduleName: string, resolvedModule: ts.ResolvedModule | ts.ResolvedTypeReferenceDirective): void {\n    const resolvedFileName = resolvedModule.resolvedFileName;\n    if (\n      !resolvedFileName ||\n      moduleName.startsWith('.') ||\n      this._processedModules.has(moduleName) ||\n      this._entryPointsUrl.includes(ngUrl(moduleName))\n    ) {\n      // Skip when module is unknown, relative, an entrypoint or already processed.\n      return;\n    }\n\n    const packageJsonPath = this.tryResolvePackage(moduleName, resolvedFileName);\n    if (!packageJsonPath) {\n      // add it to processed so the second time round we skip this.\n      this._processedModules.add(moduleName);\n\n      return;\n    }\n\n    // If the package.json is read only we should skip calling NGCC.\n    // With Bazel when running under sandbox the filesystem is read-only.\n    try {\n      accessSync(packageJsonPath, constants.W_OK);\n    } catch {\n      // add it to processed so the second time round we skip this.\n      this._processedModules.add(moduleName);\n\n      return;\n    }\n\n    mainNgcc({\n      basePath: this._nodeModulesDirectory,\n      targetEntryPointPath: path.dirname(packageJsonPath),\n      compileAllFormats: false,\n      propertiesToConsider: ['es2015', 'browser', 'module', 'main'],\n      createNewEntryPointFormats: true,\n      logger: this._logger,\n      tsConfigPath: this.projectPath,\n    });\n\n    this._processedModules.add(moduleName);\n  }\n\n  /**\n   * Try resolve a package.json file from the resolved .d.ts file.\n   */\n  private tryResolvePackage(moduleName: string, resolvedFileName: string): string | undefined {\n    try {\n      return require.resolve(`${moduleName}/package.json`, {\n        paths: [resolvedFileName],\n      });\n    } catch {\n      // if it fails this might be a deep import which doesn't have a package.json\n      // Ex: @angular/compiler/src/i18n/i18n_ast/package.json\n      // or local libraries which don't reside in node_modules\n      const packageJsonPath = path.resolve(resolvedFileName, '../package.json');\n\n      return existsSync(packageJsonPath) ? packageJsonPath : undefined;\n    }\n  }\n\n  private findNodeModulesDirectory(startPoint: string): string {\n    let current = startPoint;\n    while (path.dirname(current) !== current) {\n      const nodePath = path.join(current, 'node_modules');\n      if (existsSync(nodePath)) {\n        return nodePath;\n      }\n\n      current = path.dirname(current);\n    }\n\n    throw new Error(`Cannot locate the 'node_modules' directory.`);\n  }\n}\n\nclass NgccLogger implements Logger {\n  level = LogLevel.info;\n\n  debug(...args: string[]) {\n    log.debug(args.join(' '));\n  }\n\n  info(...args: string[]) {\n    log.info(args.join(' '));\n  }\n\n  warn(...args: string[]) {\n    log.warn(args.join(' '));\n  }\n\n  error(...args: string[]) {\n    log.error(args.join(' '));\n  }\n}\n"]}