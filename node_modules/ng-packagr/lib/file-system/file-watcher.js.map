{"version":3,"file":"file-watcher.js","sourceRoot":"","sources":["../../../src/lib/file-system/file-watcher.ts"],"names":[],"mappings":";;;AAAA,6BAA6B;AAC7B,qCAAqC;AACrC,+BAA4C;AAC5C,wCAA+C;AAC/C,oCAAoC;AAUpC,SAAgB,eAAe,CAC7B,WAAmB,EACnB,eAAoC,EAAE;IAEtC,GAAG,CAAC,KAAK,CAAC,sCAAsC,WAAW,mBAAmB,YAAY,EAAE,CAAC,CAAC;IAE9F,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE;QACxC,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE,CAAC,GAAG,YAAY,EAAE,iEAAiE,CAAC;QAC7F,UAAU,EAAE,IAAI;KACjB,CAAC,CAAC;IAEH,MAAM,gBAAgB,GAAG,CAAC,KAAyB,EAAE,QAAgB,EAAE,QAAoC,EAAE,EAAE;QAC7G,GAAG,CAAC,KAAK,CAAC,+BAA+B,KAAK,WAAW,QAAQ,EAAE,CAAC,CAAC;QAErE,IAAI,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,QAAQ,EAAE;YAC/C,2GAA2G;YAC3G,OAAO;SACR;QAED,QAAQ,CAAC,IAAI,CAAC;YACZ,QAAQ,EAAE,qBAAc,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,KAAK;SACN,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,iBAAU,CAAC,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE;QACpC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,KAAyB,EAAE,QAAgB,EAAE,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC9G,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC,CAAC,CAAC;AACL,CAAC;AA9BD,0CA8BC","sourcesContent":["import * as path from 'path';\nimport * as chokidar from 'chokidar';\nimport { Observer, Observable } from 'rxjs';\nimport { ensureUnixPath } from '../utils/path';\nimport * as log from '../utils/log';\n\ntype AllFileWatchEvents = 'change' | 'unlink' | 'add' | 'unlinkDir' | 'addDir';\nexport type FileWatchEvent = Exclude<AllFileWatchEvents, 'unlinkDir' | 'addDir'>;\n\nexport interface FileChangedEvent {\n  filePath: string;\n  event: FileWatchEvent;\n}\n\nexport function createFileWatch(\n  projectPath: string,\n  ignoredPaths: (RegExp | string)[] = [],\n): Observable<FileChangedEvent> {\n  log.debug(`Watching for changes: projectPath: ${projectPath}, ignoredPaths: ${ignoredPaths}`);\n\n  const watch = chokidar.watch(projectPath, {\n    ignoreInitial: true,\n    ignored: [...ignoredPaths, /((^[\\/\\\\])\\..)|(\\.js$)|(\\.map$)|(\\.metadata\\.json|node_modules)/],\n    persistent: true,\n  });\n\n  const handleFileChange = (event: AllFileWatchEvents, filePath: string, observer: Observer<FileChangedEvent>) => {\n    log.debug(`Watch: Path changed. Event: ${event}, Path: ${filePath}`);\n\n    if (event === 'unlinkDir' || event === 'addDir') {\n      // we don't need to trigger on directory removed or renamed as chokidar will fire the changes for each file\n      return;\n    }\n\n    observer.next({\n      filePath: ensureUnixPath(path.resolve(filePath)),\n      event,\n    });\n  };\n\n  return Observable.create((observer) => {\n    watch.on('all', (event: AllFileWatchEvents, filePath: string) => handleFileChange(event, filePath, observer));\n    return () => watch.close();\n  });\n}\n"]}