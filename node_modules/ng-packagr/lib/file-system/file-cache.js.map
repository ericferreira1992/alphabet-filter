{"version":3,"file":"file-cache.js","sourceRoot":"","sources":["../../../src/lib/file-system/file-cache.ts"],"names":[],"mappings":";;;AACA,wCAA+C;AAS/C,MAAa,SAAS;IAAtB;QACU,UAAK,GAA4B,IAAI,GAAG,EAAE,CAAC;QAEnD,YAAO,GAGK,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,UAAK,GAAe,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAiCxD,CAAC;IA/BC,IAAI;QACF,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,YAAY,CAAC,QAAgB;QAC3B,OAAO,qBAAc,CAAC,QAAQ,CAAC,CAAC;IAClC,CAAC;IAED,MAAM,CAAC,QAAgB;QACrB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,GAAG,CAAC,QAAgB;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,GAAG,CAAC,QAAgB;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;IACrD,CAAC;IAED,WAAW,CAAC,QAAgB;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAClD,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAE1C,IAAI,CAAC,KAAK,EAAE;YACV,KAAK,GAAG,EAAE,CAAC;YACX,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;SACtC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF;AAxCD,8BAwCC","sourcesContent":["import * as ts from 'typescript';\nimport { ensureUnixPath } from '../utils/path';\n\nexport interface CacheEntry {\n  exists?: boolean;\n  sourceFile?: ts.SourceFile;\n  content?: string;\n  declarationFileName?: string;\n}\n\nexport class FileCache {\n  private cache: Map<string, CacheEntry> = new Map();\n\n  forEach: (\n    callbackfn: (value: CacheEntry, key: string, map: Map<string, CacheEntry>) => void,\n    thisArg?: any,\n  ) => void = this.cache.forEach.bind(this.cache);\n  clear: () => void = this.cache.clear.bind(this.cache);\n\n  size(): number {\n    return this.cache.size;\n  }\n\n  normalizeKey(fileName: string): string {\n    return ensureUnixPath(fileName);\n  }\n\n  delete(fileName: string): boolean {\n    return this.cache.delete(this.normalizeKey(fileName));\n  }\n\n  has(fileName: string): boolean {\n    return this.cache.has(this.normalizeKey(fileName));\n  }\n\n  get(fileName: string): CacheEntry | undefined {\n    return this.cache.get(this.normalizeKey(fileName));\n  }\n\n  getOrCreate(fileName: string): CacheEntry {\n    const normalizedKey = this.normalizeKey(fileName);\n    let entry = this.cache.get(normalizedKey);\n\n    if (!entry) {\n      entry = {};\n      this.cache.set(normalizedKey, entry);\n    }\n\n    return entry;\n  }\n}\n"]}