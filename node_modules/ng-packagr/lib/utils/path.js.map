{"version":3,"file":"path.js","sourceRoot":"","sources":["../../../src/lib/utils/path.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AAEjC,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/D,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAkB,CAAC;AAEzC,QAAA,cAAc,GAAG,CAAC,IAAa,EAAiB,EAAE;IAC7D,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,MAAM,SAAS,GAAG,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;IAChD,IAAI,SAAS,EAAE;QACb,OAAO,SAAS,CAAC;KAClB;IAED,2FAA2F;IAC3F,iEAAiE;IACjE,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACrE,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;IAC9C,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC","sourcesContent":["import * as nodePath from 'path';\n\nconst PATH_REGEXP = new RegExp('\\\\' + nodePath.win32.sep, 'g');\nconst ensureUnixPathCache = new Map<string, string>();\n\nexport const ensureUnixPath = (path?: string): string | null => {\n  if (!path) {\n    return null;\n  }\n\n  const cachePath = ensureUnixPathCache.get(path);\n  if (cachePath) {\n    return cachePath;\n  }\n\n  // we use a regex instead of the character literal due to a bug in some versions of node.js\n  // the path separator needs to be preceded by an escape character\n  const normalizedPath = path.replace(PATH_REGEXP, nodePath.posix.sep);\n  ensureUnixPathCache.set(path, normalizedPath);\n  return normalizedPath;\n};\n"]}