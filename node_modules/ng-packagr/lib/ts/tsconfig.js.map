{"version":3,"file":"tsconfig.js","sourceRoot":"","sources":["../../../src/lib/ts/tsconfig.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ng from '@angular/compiler-cli';\nimport * as path from 'path';\nimport * as ts from 'typescript';\nimport { EntryPointNode } from '../ng-package/nodes';\nimport * as log from '../utils/log';\n\n/**\n * Reads the default TypeScript configuration.\n */\nexport function readDefaultTsConfig(fileName?: string): ng.ParsedConfiguration {\n  if (!fileName) {\n    fileName = path.resolve(__dirname, 'conf', 'tsconfig.ngc.json');\n  }\n\n  // these options are mandatory\n  const extraOptions: ng.CompilerOptions = {\n    moduleResolution: ts.ModuleResolutionKind.NodeJs,\n    target: ts.ScriptTarget.ES2015,\n    experimentalDecorators: true,\n\n    // sourcemaps\n    sourceMap: false,\n    inlineSources: true,\n    inlineSourceMap: true,\n\n    outDir: '',\n    declaration: true,\n\n    // ng compiler to options\n    enableResourceInlining: true,\n\n    // these are required to set the appropriate EmitFlags\n    flatModuleId: 'AUTOGENERATED',\n    flatModuleOutFile: 'AUTOGENERATED',\n  };\n\n  const config = ng.readConfiguration(fileName, extraOptions);\n  const options = config.options;\n\n  // todo: alanagius4 - the below shouldn't be needed but it seems that setting it only in create-emit-callback.ts\n  // is not working correctly\n  const transformDecorators = !options.enableIvy && options.annotationsAs !== 'decorators';\n  if ((options.annotateForClosureCompiler || options.annotationsAs === 'static fields') && transformDecorators) {\n    // This is needed as a workaround for https://github.com/angular/tsickle/issues/635\n    // Otherwise tsickle might emit references to non imported values\n    // as TypeScript elided the import.\n    options.emitDecoratorMetadata = true;\n  }\n\n  return config;\n}\n\n/**\n * Creates a parsed TypeScript configuration object.\n *\n * @param values File path or parsed configuration.\n */\nexport function createDefaultTsConfig(values?: ng.ParsedConfiguration | string): ng.ParsedConfiguration {\n  if (!values) {\n    return readDefaultTsConfig();\n  } else if (typeof values === 'string') {\n    return readDefaultTsConfig(values);\n  } else {\n    return values;\n  }\n}\n\n/**\n * Initializes TypeScript Compiler options and Angular Compiler options by overriding the\n * default config with entry point-specific values.\n */\nexport const initializeTsConfig = (defaultTsConfig: ng.ParsedConfiguration, entryPoints: EntryPointNode[]) => {\n  if (defaultTsConfig.errors.length > 0) {\n    throw ng.formatDiagnostics(defaultTsConfig.errors);\n  }\n\n  entryPoints.forEach(currentEntryPoint => {\n    const { entryPoint } = currentEntryPoint.data;\n    log.debug(`Initializing tsconfig for ${entryPoint.moduleId}`);\n    const basePath = path.dirname(entryPoint.entryFilePath);\n\n    // Resolve defaults from DI token and create a deep copy of the defaults\n    let tsConfig: ng.ParsedConfiguration = JSON.parse(JSON.stringify(defaultTsConfig));\n\n    const overrideOptions: ng.CompilerOptions = {\n      flatModuleId: entryPoint.moduleId,\n      flatModuleOutFile: `${entryPoint.flatModuleFile}.js`,\n      basePath,\n      rootDir: basePath,\n      sourceRoot: basePath,\n    };\n\n    tsConfig.rootNames = [entryPoint.entryFilePath];\n    tsConfig.options = { ...tsConfig.options, ...overrideOptions };\n    currentEntryPoint.data.tsConfig = tsConfig;\n  });\n};\n\n/**\n * Set the paths for entrypoint dependencies.\n *\n * This doesn't mutate the object.\n *\n * @param parsedTsConfig - A parsed tsconfig\n * @param entryPoints - A list of entryPoints\n * @param pointToSource Point the path mapping to either the source code or emitted declarations.\n * Typically for analysis one should point to the source files while for a compilation once should use the emitted declarations\n */\nexport function setDependenciesTsConfigPaths(\n  parsedTsConfig: ng.ParsedConfiguration,\n  entryPoints: EntryPointNode[],\n  pointToSource = false,\n): ng.ParsedConfiguration {\n  const tsConfig = JSON.parse(JSON.stringify(parsedTsConfig));\n\n  // Add paths mappings for dependencies\n  if (!tsConfig.options.paths) {\n    tsConfig.options.paths = {};\n  }\n\n  for (let dep of entryPoints) {\n    const { entryPoint } = dep.data;\n    const { moduleId, destinationFiles, entryFilePath } = entryPoint;\n    const mappedPath = [pointToSource ? entryFilePath : destinationFiles.declarations];\n\n    if (!tsConfig.options.paths[moduleId]) {\n      tsConfig.options.paths[moduleId] = mappedPath;\n    } else {\n      tsConfig.options.paths[moduleId].unshift(...mappedPath);\n    }\n  }\n\n  return tsConfig;\n}\n"]}