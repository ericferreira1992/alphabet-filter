{"version":3,"file":"packagr.js","sourceRoot":"","sources":["../../src/lib/packagr.ts"],"names":[],"mappings":";;;AAAA,+CAA4E;AAE5E,+BAAkE;AAClE,8CAAiD;AACjD,qDAAiD;AAEjD,mCAAmC;AACnC,gFAA4E;AAC5E,4EAAgF;AAChF,wDAA+E;AAC/E,6CAA8C;AAC9C,wDAA2E;AAE3E;;;;;;GAMG;AACH,MAAa,SAAS;IAGpB,YAAoB,SAAqB;QAArB,cAAS,GAAT,SAAS,CAAY;QAFjC,mBAAc,GAA8B,8BAAiB,CAAC,OAAO,CAAC;IAElC,CAAC;IAE7C;;;;;OAKG;IACI,WAAW,CAAC,OAAyB;QAC1C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAE7C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,UAAU,CAAC,OAAe;QAC/B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2BAAc,CAAC,OAAO,CAAC,CAAC,CAAC;QAE7C,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;;OAMG;IACI,aAAa,CAAC,SAAqB;QACxC,IAAI,CAAC,SAAS,GAAG,CAAC,GAAG,IAAI,CAAC,SAAS,EAAE,GAAG,SAAS,CAAC,CAAC;QAEnD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,YAAY,CAAC,aAA2C;QAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kCAAe,CAAC,aAAa,CAAC,CAAC,CAAC;QAEpD,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;;OAKG;IACI,kBAAkB,CAAC,SAAoC;QAC5D,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAEhC,OAAO,IAAI,CAAC;IACd,CAAC;IAED;;;;OAIG;IACI,KAAK;QACV,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC,SAAS,EAAE,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACI,KAAK;QACV,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,2BAAc,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;QAErD,OAAO,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAClC,CAAC;IAED;;;;OAIG;IACI,iBAAiB;QACtB,MAAM,QAAQ,GAAG,iCAAkB,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QACrE,MAAM,sBAAsB,GAAG,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;QAEjE,OAAO,SAAY,CAAC,IAAI,wBAAU,EAAE,CAAC,CAAC,IAAI,CACxC,sBAAsB,EACtB,sBAAU,CAAC,GAAG,CAAC,EAAE;YACf,2CAA2C;YAC3C,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACf,OAAO,iBAAU,CAAC,GAAG,CAAC,CAAC;QACzB,CAAC,CAAC,EACF,eAAG,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,CACrB,CAAC;IACJ,CAAC;CACF;AAzGD,8BAyGC;AAEY,QAAA,SAAS,GAAG,GAAc,EAAE,CACvC,IAAI,SAAS,CAAC;IACZ,sCAAsC;IACtC,GAAG,8BAAiB;IACpB,GAAG,sCAAqB;CACzB,CAAC,CAAC","sourcesContent":["import { InjectionToken, Provider, ReflectiveInjector } from 'injection-js';\nimport { ParsedConfiguration } from '@angular/compiler-cli';\nimport { of as observableOf, Observable, throwError } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { BuildGraph } from './graph/build-graph';\nimport { Transform } from './graph/transform';\nimport * as log from './utils/log';\nimport { provideTsConfig } from './ng-package/entry-point/init-tsconfig.di';\nimport { ENTRY_POINT_PROVIDERS } from './ng-package/entry-point/entry-point.di';\nimport { PACKAGE_TRANSFORM, PACKAGE_PROVIDERS } from './ng-package/package.di';\nimport { provideProject } from './project.di';\nimport { provideOptions, NgPackagrOptions } from './ng-package/options.di';\n\n/**\n * The original ng-packagr implemented on top of a rxjs-ified and di-jectable transformation pipeline.\n *\n * See the `docs/transformations.md` for more prose description.\n *\n * @link https://github.com/ng-packagr/ng-packagr/pull/572\n */\nexport class NgPackagr {\n  private buildTransform: InjectionToken<Transform> = PACKAGE_TRANSFORM.provide;\n\n  constructor(private providers: Provider[]) {}\n\n  /**\n   * Adds options to ng-packagr\n   *\n   * @param options Ng Packagr Options\n   * @return Self instance for fluent API\n   */\n  public withOptions(options: NgPackagrOptions): NgPackagr {\n    this.providers.push(provideOptions(options));\n\n    return this;\n  }\n\n  /**\n   * Sets the path to the user's \"ng-package\" file (either `package.json`, `ng-package.json`, or `ng-package.js`)\n   *\n   * @param project File path\n   * @return Self instance for fluent API\n   */\n  public forProject(project: string): NgPackagr {\n    this.providers.push(provideProject(project));\n\n    return this;\n  }\n\n  /**\n   * Adds dependency injection providers.\n   *\n   * @param providers\n   * @return Self instance for fluent API\n   * @link https://github.com/mgechev/injection-js\n   */\n  public withProviders(providers: Provider[]): NgPackagr {\n    this.providers = [...this.providers, ...providers];\n\n    return this;\n  }\n\n  /**\n   * Overwrites the default TypeScript configuration.\n   *\n   * @param defaultValues A tsconfig providing default values to the compilation.\n   * @return Self instance for fluent API\n   */\n  public withTsConfig(defaultValues: ParsedConfiguration | string): NgPackagr {\n    this.providers.push(provideTsConfig(defaultValues));\n\n    return this;\n  }\n\n  /**\n   * Overwrites the 'build' transform.\n   *\n   * @param transform\n   * @return Self instance for fluent API\n   */\n  public withBuildTransform(transform: InjectionToken<Transform>): NgPackagr {\n    this.buildTransform = transform;\n\n    return this;\n  }\n\n  /**\n   * Builds the project by kick-starting the 'build' transform over an (initially) empty `BuildGraph``\n   *\n   * @return A promisified result of the transformation pipeline.\n   */\n  public build(): Promise<void> {\n    return this.buildAsObservable().toPromise();\n  }\n\n  /**\n   * Builds and watch for changes by kick-starting the 'watch' transform over an (initially) empty `BuildGraph``\n   *\n   * @return An observable result of the transformation pipeline.\n   */\n  public watch(): Observable<void> {\n    this.providers.push(provideOptions({ watch: true }));\n\n    return this.buildAsObservable();\n  }\n\n  /**\n   * Builds the project by kick-starting the 'build' transform over an (initially) empty `BuildGraph``\n   *\n   * @return An observable result of the transformation pipeline.\n   */\n  public buildAsObservable(): Observable<void> {\n    const injector = ReflectiveInjector.resolveAndCreate(this.providers);\n    const buildTransformOperator = injector.get(this.buildTransform);\n\n    return observableOf(new BuildGraph()).pipe(\n      buildTransformOperator,\n      catchError(err => {\n        // Report error and re-throw to subscribers\n        log.error(err);\n        return throwError(err);\n      }),\n      map(() => undefined),\n    );\n  }\n}\n\nexport const ngPackagr = (): NgPackagr =>\n  new NgPackagr([\n    // Add default providers to this list.\n    ...PACKAGE_PROVIDERS,\n    ...ENTRY_POINT_PROVIDERS,\n  ]);\n"]}