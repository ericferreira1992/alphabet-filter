{"version":3,"file":"package.transform.js","sourceRoot":"","sources":["../../../src/lib/ng-package/package.transform.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as fs from 'fs-extra';\nimport { Observable, of as observableOf, pipe, NEVER, from } from 'rxjs';\nimport {\n  concatMap,\n  map,\n  switchMap,\n  tap,\n  mapTo,\n  catchError,\n  startWith,\n  debounceTime,\n  filter,\n  takeLast,\n  defaultIfEmpty,\n} from 'rxjs/operators';\nimport { BuildGraph } from '../graph/build-graph';\nimport { DepthBuilder } from '../graph/depth';\nimport { STATE_IN_PROGESS } from '../graph/node';\nimport { Transform } from '../graph/transform';\nimport * as log from '../utils/log';\nimport { rimraf } from '../utils/rimraf';\nimport {\n  PackageNode,\n  EntryPointNode,\n  ngUrl,\n  isEntryPoint,\n  byEntryPoint,\n  isPackage,\n  fileUrl,\n  fileUrlPath,\n  GlobCache,\n} from './nodes';\nimport { discoverPackages } from './discover-packages';\nimport { createFileWatch } from '../file-system/file-watcher';\nimport { NgPackagrOptions } from './options.di';\nimport { flatten } from '../utils/array';\nimport { ensureUnixPath } from '../utils/path';\nimport { FileCache } from '../file-system/file-cache';\n\n/**\n * A transformation for building an npm package:\n *\n *  - discoverPackages\n *  - options\n *  - initTsConfig\n *  - analyzeTsSources (thereby extracting template and stylesheet files)\n *  - for each entry point\n *    - run the entryPontTransform\n *  - writeNpmPackage\n *\n * @param project Project token, reference to `ng-package.json`\n * @param options ng-packagr options\n * @param initTsConfigTransform Transformation initializing the tsconfig of each entry point.\n * @param analyseSourcesTransform Transformation analyzing the typescript source files of each entry point.\n * @param entryPointTransform Transformation for asset rendering and compilation of a single entry point.\n */\nexport const packageTransformFactory = (\n  project: string,\n  options: NgPackagrOptions,\n  initTsConfigTransform: Transform,\n  analyseSourcesTransform: Transform,\n  entryPointTransform: Transform,\n) => (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n  const pkgUri = ngUrl(project);\n\n  const buildTransform = options.watch\n    ? watchTransformFactory(project, options, analyseSourcesTransform, entryPointTransform)\n    : buildTransformFactory(project, analyseSourcesTransform, entryPointTransform);\n\n  return source$.pipe(\n    tap(() => log.info(`Building Angular Package`)),\n    // Discover packages and entry points\n    switchMap(graph => {\n      const pkg = discoverPackages({ project });\n\n      return from(pkg).pipe(\n        map(value => {\n          const ngPkg = new PackageNode(pkgUri);\n          ngPkg.data = value;\n\n          return graph.put(ngPkg);\n        }),\n      );\n    }),\n    // Clean the primary dest folder (should clean all secondary sub-directory, as well)\n    switchMap(\n      graph => {\n        const { dest, deleteDestPath } = graph.get(pkgUri).data;\n        return from(deleteDestPath ? rimraf(dest) : Promise.resolve());\n      },\n      (graph, _) => graph,\n    ),\n    // Add entry points to graph\n    map(graph => {\n      const ngPkg = graph.get(pkgUri) as PackageNode;\n      const entryPoints = [ngPkg.data.primary, ...ngPkg.data.secondaries].map(entryPoint => {\n        const { destinationFiles, moduleId } = entryPoint;\n        const node = new EntryPointNode(ngUrl(moduleId), ngPkg.cache.sourcesFileCache);\n        node.data = { entryPoint, destinationFiles };\n        node.state = 'dirty';\n        ngPkg.dependsOn(node);\n\n        return node;\n      });\n\n      return graph.put(entryPoints);\n    }),\n    // Initialize the tsconfig for each entry point\n    initTsConfigTransform,\n    // perform build\n    buildTransform,\n  );\n};\n\nconst watchTransformFactory = (\n  project: string,\n  _options: NgPackagrOptions,\n  analyseSourcesTransform: Transform,\n  entryPointTransform: Transform,\n) => (source$: Observable<BuildGraph>): Observable<BuildGraph> => {\n  const CompleteWaitingForFileChange = '\\nCompilation complete. Watching for file changes...';\n  const FileChangeDetected = '\\nFile change detected. Starting incremental compilation...';\n  const FailedWaitingForFileChange = '\\nCompilation failed. Watching for file changes...';\n\n  return source$.pipe(\n    switchMap(graph => {\n      const { data, cache } = graph.find(isPackage) as PackageNode;\n      return createFileWatch(data.src, [data.dest]).pipe(\n        tap(fileChange => {\n          const { filePath, event } = fileChange;\n          const { sourcesFileCache } = cache;\n          const cachedSourceFile = sourcesFileCache.get(filePath);\n\n          if (!cachedSourceFile) {\n            if (event === 'unlink' || event === 'add') {\n              cache.globCache = regenerateGlobCache(sourcesFileCache);\n            }\n            return;\n          }\n\n          const { declarationFileName } = cachedSourceFile;\n\n          const uriToClean = [filePath, declarationFileName].map(x => fileUrl(ensureUnixPath(x)));\n          let nodesToClean = graph.filter(node => uriToClean.some(uri => uri === node.url));\n\n          nodesToClean = flatten([\n            ...nodesToClean,\n            // if a non ts file changes we need to clean up it's direct dependees\n            // this is mainly done for resources such as html and css\n            ...nodesToClean.filter(x => !x.url.endsWith('.ts')).map(x => x.dependees),\n          ]);\n\n          // delete node that changes\n          nodesToClean.forEach(node => {\n            sourcesFileCache.delete(fileUrlPath(node.url));\n          });\n\n          const entryPoints = graph.filter(isEntryPoint) as EntryPointNode[];\n          entryPoints.forEach(entryPoint => {\n            const isDirty = entryPoint.dependents.some(x => nodesToClean.some(node => node.url === x.url));\n            if (isDirty) {\n              entryPoint.state = 'dirty';\n              const { metadata } = entryPoint.data.destinationFiles;\n              sourcesFileCache.delete(metadata);\n            }\n          });\n\n          // Regenerate glob cache\n          if (event === 'unlink' || event === 'add') {\n            cache.globCache = regenerateGlobCache(sourcesFileCache);\n          }\n        }),\n        debounceTime(200),\n        tap(() => log.msg(FileChangeDetected)),\n        startWith(undefined),\n        mapTo(graph),\n      );\n    }),\n    switchMap(graph => {\n      return observableOf(graph).pipe(\n        buildTransformFactory(project, analyseSourcesTransform, entryPointTransform),\n        tap(() => log.msg(CompleteWaitingForFileChange)),\n        catchError(error => {\n          log.error(error);\n          log.msg(FailedWaitingForFileChange);\n          return NEVER;\n        }),\n      );\n    }),\n  );\n};\n\nconst buildTransformFactory = (project: string, analyseSourcesTransform: Transform, entryPointTransform: Transform) => (\n  source$: Observable<BuildGraph>,\n): Observable<BuildGraph> => {\n  const pkgUri = ngUrl(project);\n  return source$.pipe(\n    // Analyse dependencies and external resources for each entry point\n    analyseSourcesTransform,\n    // Next, run through the entry point transformation (assets rendering, code compilation)\n    scheduleEntryPoints(entryPointTransform),\n    // Write npm package to dest folder\n    writeNpmPackage(pkgUri),\n    tap(graph => {\n      const ngPkg = graph.get(pkgUri);\n      log.success('\\n------------------------------------------------------------------------------');\n      log.success(`Built Angular Package\n - from: ${ngPkg.data.src}\n - to:   ${ngPkg.data.dest}`);\n      log.success('------------------------------------------------------------------------------');\n    }),\n  );\n};\n\nconst writeNpmPackage = (pkgUri: string): Transform =>\n  pipe(\n    switchMap(graph => {\n      const { data } = graph.get(pkgUri);\n      const filesToCopy = Promise.all(\n        [`${data.src}/LICENSE`, `${data.src}/README.md`, `${data.src}/CHANGELOG.md`]\n          .filter(f => fs.existsSync(f))\n          .map(src => fs.copy(src, path.join(data.dest, path.basename(src)), { dereference: true, overwrite: true })),\n      );\n\n      return from(filesToCopy).pipe(map(() => graph));\n    }),\n  );\n\nconst scheduleEntryPoints = (epTransform: Transform): Transform =>\n  pipe(\n    concatMap(graph => {\n      // Calculate node/dependency depth and determine build order\n      const depthBuilder = new DepthBuilder();\n      const entryPoints = graph.filter(isEntryPoint);\n      entryPoints.forEach(entryPoint => {\n        const deps = entryPoint.filter(isEntryPoint).map(ep => ep.url);\n        depthBuilder.add(entryPoint.url, deps);\n      });\n\n      // The array index is the depth.\n      const groups = depthBuilder.build();\n\n      // Build entry points with lower depth values first.\n      return from(flatten(groups)).pipe(\n        map(epUrl => graph.find(byEntryPoint().and(ep => ep.url === epUrl)) as EntryPointNode),\n        filter(entryPoint => entryPoint.state !== 'done'),\n        concatMap(ep =>\n          observableOf(ep).pipe(\n            // Mark the entry point as 'in-progress'\n            tap(entryPoint => (entryPoint.state = STATE_IN_PROGESS)),\n            mapTo(graph),\n            epTransform,\n          ),\n        ),\n        takeLast(1), // don't use last as sometimes it this will cause 'no elements in sequence',\n        defaultIfEmpty(graph),\n      );\n    }),\n  );\n\nfunction regenerateGlobCache(sourcesFileCache: FileCache): GlobCache {\n  const cache: GlobCache = {};\n  sourcesFileCache.forEach((value, key) => {\n    // ignore node_modules and file which don't exists as they are not used by globbing in our case\n    if (value.exists && !key.includes('node_modules')) {\n      cache[key] = 'FILE';\n    }\n  });\n\n  return cache;\n}\n"]}