{"version":3,"file":"compile-ngc.transform.js","sourceRoot":"","sources":["../../../../src/lib/ng-package/entry-point/compile-ngc.transform.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,6BAA6B;AAC7B,iCAAiC;AACjC,qDAAwE;AACxE,yEAAoE;AACpE,6DAAyD;AACzD,gDAAiE;AACjE,uCAAuC;AACvC,oCAAgF;AAChF,4EAAwE;AAE3D,QAAA,mBAAmB,GAAc,gCAAoB,CAAC,CAAM,KAAK,EAAC,EAAE;IAC/E,GAAG,CAAC,IAAI,CAAC,0CAA0C,CAAC,CAAC;IACrD,MAAM,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,8BAAsB,EAAE,CAAmB,CAAC;IAC1E,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,oBAAY,CAAqB,CAAC;IACnE,sCAAsC;IACtC,MAAM,QAAQ,GAAG,uCAA4B,CAAC,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;IAErF,6BAA6B;IAC7B,MAAM,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,gBAAgB,CAAC;IACnE,MAAM,EAAE,qBAAqB,EAAE,GAAG,UAAU,CAAC,KAAK,CAAC;IACnD,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,iBAAiB,EAAE,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC;IAC3E,MAAM,mBAAmB,GAAG,IAAI,0CAAmB,CAAC,QAAQ,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;IAEzF,MAAM,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,SAAS;QAC9C,CAAC,CAAC,IAAI,8BAAa,CAAC,QAAQ,CAAC,OAAO,EAAE,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC;QACpE,CAAC,CAAC,SAAS,CAAC;IAEd,MAAM,yCAAkB,CACtB,KAAK,EACL,QAAQ,EACR,qBAAqB,EACrB,mBAAmB,EACnB;QACE,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QAC7B,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC;QAC1C,WAAW,EAAE,IAAI;QACjB,MAAM,EAAE,EAAE,CAAC,YAAY,CAAC,MAAM;KAC/B,EACD,aAAa,CACd,CAAC;IAEF,OAAO,KAAK,CAAC;AACf,CAAC,CAAA,CAAC,CAAC","sourcesContent":["import * as path from 'path';\nimport * as ts from 'typescript';\nimport { Transform, transformFromPromise } from '../../graph/transform';\nimport { compileSourceFiles } from '../../ngc/compile-source-files';\nimport { NgccProcessor } from '../../ngc/ngcc-processor';\nimport { setDependenciesTsConfigPaths } from '../../ts/tsconfig';\nimport * as log from '../../utils/log';\nimport { isEntryPointInProgress, EntryPointNode, isEntryPoint } from '../nodes';\nimport { StylesheetProcessor } from '../../styles/stylesheet-processor';\n\nexport const compileNgcTransform: Transform = transformFromPromise(async graph => {\n  log.info(`Compiling TypeScript sources through ngc`);\n  const entryPoint = graph.find(isEntryPointInProgress()) as EntryPointNode;\n  const entryPoints = graph.filter(isEntryPoint) as EntryPointNode[];\n  // Add paths mappings for dependencies\n  const tsConfig = setDependenciesTsConfigPaths(entryPoint.data.tsConfig, entryPoints);\n\n  // Compile TypeScript sources\n  const { esm2015, declarations } = entryPoint.data.destinationFiles;\n  const { moduleResolutionCache } = entryPoint.cache;\n  const { basePath, cssUrl, styleIncludePaths } = entryPoint.data.entryPoint;\n  const stylesheetProcessor = new StylesheetProcessor(basePath, cssUrl, styleIncludePaths);\n\n  const ngccProcessor = tsConfig.options.enableIvy\n    ? new NgccProcessor(tsConfig.project, tsConfig.options, entryPoints)\n    : undefined;\n\n  await compileSourceFiles(\n    graph,\n    tsConfig,\n    moduleResolutionCache,\n    stylesheetProcessor,\n    {\n      outDir: path.dirname(esm2015),\n      declarationDir: path.dirname(declarations),\n      declaration: true,\n      target: ts.ScriptTarget.ES2015,\n    },\n    ngccProcessor,\n  );\n\n  return graph;\n});\n"]}