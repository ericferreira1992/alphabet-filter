{"version":3,"file":"stylesheet-processor.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import * as path from 'path';\nimport * as log from '../utils/log';\nimport { execFileSync } from 'child_process';\n\n// CSS Tools\nimport * as autoprefixer from 'autoprefixer';\nimport * as browserslist from 'browserslist';\nimport * as nodeSassTildeImporter from 'node-sass-tilde-importer';\nimport * as postcss from 'postcss';\nimport * as postcssUrl from 'postcss-url';\nimport * as cssnanoPresetDefault from 'cssnano-preset-default';\nimport * as stylus from 'stylus';\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\n\n/*\n * Please be aware of the few differences in behaviour https://github.com/sass/dart-sass/blob/master/README.md#behavioral-differences-from-ruby-sass\n * By default `npm install` will install sass.\n * To use node-sass you need to use:\n *   Npm:\n *     `npm install node-sass --save-dev`\n *   Yarn:\n *     `yarn add node-sass --dev`\n */\nlet sassComplier: any | undefined;\ntry {\n  sassComplier = require('node-sass'); // Check if node-sass is explicitly included.\n} catch {\n  sassComplier = require('sass');\n}\n\nexport class StylesheetProcessor {\n  private postCssProcessor: postcss.Processor;\n\n  constructor(readonly basePath: string, readonly cssUrl?: CssUrl, readonly styleIncludePaths?: string[]) {\n    this.postCssProcessor = this.createPostCssProcessor(basePath, cssUrl);\n  }\n\n  process(filePath: string, content: string) {\n    // Render pre-processor language (sass, styl, less)\n    const renderedCss: string = this.renderPreProcessor(filePath, content);\n\n    // Render postcss (autoprefixing and friends)\n    const result = this.postCssProcessor.process(renderedCss, {\n      from: filePath,\n      to: filePath.replace(path.extname(filePath), '.css'),\n    });\n\n    // Log warnings from postcss\n    result.warnings().forEach(msg => log.warn(msg.toString()));\n\n    return result.css;\n  }\n\n  private renderPreProcessor(filePath: string, content: string): string {\n    const ext = path.extname(filePath);\n\n    log.debug(`rendering ${ext} from ${filePath}`);\n\n    switch (ext) {\n      case '.sass':\n      case '.scss':\n        return sassComplier\n          .renderSync({\n            file: filePath,\n            data: content,\n            indentedSyntax: '.sass' === ext,\n            importer: nodeSassTildeImporter,\n            includePaths: this.styleIncludePaths,\n          })\n          .css.toString();\n\n      case '.less':\n        // this is the only way I found to make LESS sync\n        const args = [require.resolve('less/bin/lessc'), filePath, '--js'];\n        if (this.styleIncludePaths.length) {\n          args.push(`--include-path=${this.styleIncludePaths.join(':')}`);\n        }\n\n        return execFileSync('node', args).toString();\n\n      case '.styl':\n      case '.stylus':\n        return (\n          stylus(content)\n            // add paths for resolve\n            .set('paths', [this.basePath, '.', ...this.styleIncludePaths, 'node_modules'])\n            // add support for resolving plugins from node_modules\n            .set('filename', filePath)\n            // turn on url resolver in stylus, same as flag --resolve-url\n            .set('resolve url', true)\n            .define('url', stylus.resolver(undefined))\n            .render()\n        );\n\n      case '.css':\n      default:\n        return content;\n    }\n  }\n\n  private createPostCssProcessor(basePath: string, cssUrl?: CssUrl): postcss.Processor {\n    log.debug(`determine browserslist for ${basePath}`);\n    const overrideBrowserslist = browserslist(undefined, { path: basePath });\n\n    const postCssPlugins = [];\n\n    if (cssUrl !== CssUrl.none) {\n      log.debug(`postcssUrl: ${cssUrl}`);\n      postCssPlugins.push(postcssUrl({ url: cssUrl }));\n    }\n\n    // this is important to be executed post running `postcssUrl`\n    postCssPlugins.push(autoprefixer({ overrideBrowserslist, grid: true }));\n\n    const preset = cssnanoPresetDefault({\n      svgo: false,\n      // Disable calc optimizations due to several issues.\n      calc: false,\n    });\n\n    const asyncPlugins = ['postcss-svgo'];\n    const cssNanoPlugins = preset.plugins\n      // replicate the `initializePlugin` behavior from https://github.com/cssnano/cssnano/blob/a566cc5/packages/cssnano/src/index.js#L8\n      .map(([creator, pluginConfig]) => creator(pluginConfig))\n      .filter(plugin => !asyncPlugins.includes(plugin.postcssPlugin));\n\n    postCssPlugins.push(...cssNanoPlugins);\n\n    return postcss(postCssPlugins);\n  }\n}\n"]}