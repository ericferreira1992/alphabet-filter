{"version":3,"file":"build-graph.js","sourceRoot":"","sources":["../../../src/lib/graph/build-graph.ts"],"names":[],"mappings":";;;AAQA;;;GAGG;AACH,MAAa,UAAU;IAAvB;QACU,UAAK,GAAG,IAAI,GAAG,EAAgB,CAAC;IAuD1C,CAAC;IArDQ,GAAG,CAAC,KAAoB;QAC7B,IAAI,KAAK,YAAY,KAAK,EAAE;YAC1B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SACpB;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,IAAU;QACvB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YAC5B,+BAA+B;YAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC;SAChF;QAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAEM,GAAG,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEM,GAAG,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEM,OAAO;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QAEnC,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAEM,IAAI,CAAC,EAA2C;QACrD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAEM,MAAM,CAAC,EAA2C;QACvD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IACnC,CAAC;IAEM,IAAI,CAAC,EAA2C;QACrD,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAEM,IAAI,CAAC,IAAU;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;CACF;AAxDD,gCAwDC","sourcesContent":["import { Node } from './node';\n\nexport interface Traversable<T> {\n  filter(by: (value: T, index: number) => boolean): T[];\n  find(by: (value: T, index: number) => boolean): T | undefined;\n  some(by: (value: T, index: number) => boolean): boolean;\n}\n\n/**\n * A tree of source files. Eventually, it's a graph. Ideally, it's an acyclic directed graph.\n * Technically, it's implemented as a map-like collection with references between map entries.\n */\nexport class BuildGraph implements Traversable<Node> {\n  private store = new Map<string, Node>();\n\n  public put(value: Node | Node[]) {\n    if (value instanceof Array) {\n      value.forEach(node => this.insert(node));\n    } else {\n      this.insert(value);\n    }\n\n    return this;\n  }\n\n  private insert(node: Node) {\n    if (this.store.has(node.url)) {\n      // Clean up dependee references\n      const oldNode = this.store.get(node.url);\n      oldNode['_dependees'] = oldNode['_dependees'].filter(node => node !== oldNode);\n    }\n\n    this.store.set(node.url, node);\n  }\n\n  public get(url: string): Node {\n    return this.store.get(url);\n  }\n\n  public has(url: string): boolean {\n    return this.store.has(url);\n  }\n\n  public entries(): Node[] {\n    const values = this.store.values();\n\n    return Array.from(values);\n  }\n\n  public some(by: (value: Node, index: number) => boolean): boolean {\n    return this.entries().some(by);\n  }\n\n  public filter(by: (value: Node, index: number) => boolean): Node[] {\n    return this.entries().filter(by);\n  }\n\n  public find(by: (value: Node, index: number) => boolean): Node | undefined {\n    return this.entries().find(by);\n  }\n\n  public from(node: Node): Traversable<Node> {\n    return node;\n  }\n\n  get size(): number {\n    return this.store.size;\n  }\n}\n"]}