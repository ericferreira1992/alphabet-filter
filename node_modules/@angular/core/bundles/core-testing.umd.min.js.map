{"version":3,"sources":["packages/core/core-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ng","core","testing","compiler","this","_global","window","runInTestZone","fn","context","finishCallback","failCallback","currentZone","Zone","current","AsyncTestZoneSpec","undefined","Error","ProxyZoneSpec","proxyZoneSpec","get","assertPresent","proxyZone","getZoneWith","previousDelegate","getDelegate","parent","run","testZoneSpec","setDelegate","error","runGuarded","waitForAsync","_Zone","Promise","reject","asyncTest","__symbol__","asyncFallback","jasmine","done","fail","e","err","_this","ComponentFixture","componentRef","ngZone","_autoDetect","_isStable","_isDestroyed","_resolve","_promise","_onUnstableSubscription","_onStableSubscription","_onMicrotaskEmptySubscription","_onErrorSubscription","changeDetectorRef","elementRef","location","debugElement","getDebugNode","nativeElement","componentInstance","instance","runOutsideAngular","onUnstable","subscribe","next","onMicrotaskEmpty","detectChanges","onStable","scheduleMicroTask","hasPendingMacrotasks","onError","prototype","_tick","checkNoChanges","autoDetectChanges","autoDetect","isStable","whenStable","resolve","res","_getRenderer","_renderer","injector","RendererFactory2","whenRenderingDone","renderer","destroy","unsubscribe","FakeAsyncTestZoneSpec","_fakeAsyncTestZoneSpec","resetFakeAsyncZoneFallback","unlockDatePatch","resetDelegate","_inFakeAsyncCall","_getFakeAsyncZoneSpec","flushMicrotasksFallback","flushMicrotasks","_Zone$1","fakeAsyncTestModule","resetFakeAsyncZone","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","__awaiter","thisArg","_arguments","P","generator","fulfilled","value","step","rejected","result","adopt","then","apply","__generator","body","f","y","t","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","n","v","op","TypeError","call","pop","length","push","__values","o","s","m","i","__read","r","ar","__spread","arguments","concat","AsyncTestCompleter","rej","_reject","stackTrace","defineProperty","enumerable","configurable","resolveComponentResources","resourceResolver","componentResolved","urlMap","Map","cachedResourceResolve","url","promise","resp","set","unwrapResponse","componentResourceResolutionQueue","forEach","component","type","promises","templateUrl","template","styleUrls","styles","styleOffset","styleUrl","index","style","splice","indexOf","fullyResolved","all","componentDefResolved","componentDefPendingResolution","delete","clearResolutionOfComponentResourcesQueue","Set","isComponentDefPendingResolution","has","old","response","text","_nextReferenceId","MetadataOverrider","_references","overrideMetadata","metadataClass","oldMetadata","override","props","_valueProps","obj","keys","prop","startsWith","proto","getPrototypeOf","protoProp","desc","getOwnPropertyDescriptor","remove","add","ɵstringify","setMetadata","metadata","removeMetadata","references","removeObjects","_loop_1","removeValue","isArray","_propHashKey","_loop_2","propValue","filter","addMetadata","addValue","propName","JSON","stringify","key","_serializeReference","ref","id","TestingModuleOverride","reflection","ɵReflectionCapabilities","OverrideResolver","overrides","resolved","addOverride","setOverrides","clear","_a","_b","getAnnotation","annotations","annotation","Directive","Component","Pipe","NgModule","overrider_1","DirectiveResolver","_super","ComponentResolver","PipeResolver","NgModuleResolver","R3TestBedCompiler","platform","additionalModuleTypes","originalComponentResolutionQueue","declarations","imports","providers","schemas","pendingComponents","pendingDirectives","pendingPipes","seenComponents","seenDirectives","overriddenModules","existingComponentStyles","resolvers","initResolvers","directive","pipe","componentToModuleScope","initialNgDefs","defCleanupOps","_injector","compilerProviders","providerOverrides","rootProviderOverrides","providerOverridesByModule","providerOverridesByToken","moduleProvidersOverridden","testModuleRef","testModuleType","DynamicTestModule","setCompilerProviders","configureTestingModule","moduleDef","_c","_d","queueTypeArray","DECLARATION","queueTypesFromModulesArray","overrideModule","ngModule","invalidTypeError","name","recompileNgModule","overrideComponent","overrideDirective","overridePipe","overrideProvider","token","provider","providerDef","useFactory","provide","deps","multi","useValue","injectableDef","ɵgetInjectableDef","providedIn","existingOverrides","overrideTemplateUsingTestingModule","def","ɵNG_COMP_DEF","overrideStyleUrls","OVERRIDE_TEMPLATE","compileComponents","resourceLoader_1","clearComponentResolutionQueue","compileTypesSync","ResourceLoader","finalize","compileTestModule","applyTransitiveScopes","applyProviderOverrides","patchComponentsWithExistingStyles","ɵRender3NgModuleRef","ApplicationInitStatus","runInitializers","localeId","LOCALE_ID","ɵDEFAULT_LOCALE_ID","ɵsetLocaleId","_compileNgModuleSync","moduleType","applyProviderOverridesToModule","_compileNgModuleAsync","_getModuleResolver","_getComponentFactories","maybeUnwrapFn","ɵmod","reduce","factories","declaration","componentDef","ɵcmp","ɵRender3ComponentFactory","needsAsyncResources","maybeStoreNgDef","ɵcompileComponent","ɵNG_DIR_DEF","ɵcompileDirective","ɵNG_PIPE_DEF","ɵcompilePipe","size","affectedModules","collectModulesAffectedByOverrides","ɵNG_MOD_DEF","storeFieldOfDefOnType","transitiveCompileScopes","moduleToScope","componentType","moduleScope","isTestingModule","isTestingModuleOverride","ɵtransitiveScopesFor","getScopeOfModule","ɵpatchComponentDefWithScope","maybeApplyOverrides","field","hasProviderOverrides","patchDefWithProviderOverrides","e_1","e_2","injectorDef","ɵNG_INJ_DEF","getOverriddenProviders","imports_1","imports_1_1","importedModule","e_1_1","flatten","object","fieldName","originalValue","e_2_1","arr","e_3","arr_1","arr_1_1","queueType","e_3_1","ɵcompileNgModuleDefs","processedNgModuleDefs","queueTypesFromModulesArrayRecur","e_4","arr_2","arr_2_1","hasNgModuleDef","e_4_1","seenModules","calcAffectedModulesRecur","path","e_5","arr_3","arr_3_1","item","e_5_1","currentDef","defField","restoreComponentResolutionQueue","queue","restoreOriginalState","forEachRight","descriptor","RootScopeModule","NgZone","enableLongStackTrace","Compiler","R3TestCompiler","CompilerModule","COMPILER_OPTIONS","opts","CompilerModuleFactory","ɵNgModuleFactory","getSingleProviderOverrides","getProviderToken","getProviderOverrides","flattenedProviders","overriddenProviders","final","seenOverriddenProviders","unshift","assign","providersResolver","resolver_1","processProvidersFn_1","ngDef","maybeFn","Function","values","mapFn","out","getProviderField","idx","expectedType","testBed","compileModuleSync","compileModuleAsync","compileModuleAndAllComponentsSync","ngModuleFactory","componentFactories","ModuleWithComponentFactories","compileModuleAndAllComponentsAsync","clearCache","clearCacheFor","getModuleId","meta","TestComponentRenderer","insertRootElement","rootElementId","ComponentFixtureAutoDetect","InjectionToken","ComponentFixtureNoNgZone","_nextRootElementId","TestBedRender3","_compiler","_testModuleRef","_activeFixtures","_globalCompilationChecked","initTestEnvironment","aotSummaries","_getTestBedRender3","resetTestEnvironment","configureCompiler","config","overrideTemplate","inject","notFoundValue","flags","Injector","THROW_IF_NOT_FOUND","InjectFlags","Default","createComponent","resetTestingModule","checkGlobalCompilationFinished","ɵresetCompiledComponents","destroyActiveFixtures","useJit","assertNotInstantiated","UNDEFINED","execute","tokens","params","map","testComponentRenderer","rootElId","noNgZone","componentFactory","initComponent","NULL","fixture","methodName","methodDescription","ɵflushModuleScopingQueueAsMuchAsPossible","console","stacktrace","unimplemented","TestingCompiler","loadAotSummaries","summaries","getComponentFactory","getComponentFromError","decorators","Injectable","testBed$1","TestingCompilerFactory","_nextRootElementId$1","TestBedViewEngine","_instantiated","_moduleRef","_moduleFactory","_compilerOptions","_moduleOverrides","_componentOverrides","_directiveOverrides","_pipeOverrides","_providers","_declarations","_imports","_schemas","_testEnvAotSummaries","_aotSummaries","_templateOverrides","_isRoot","_rootProviderOverrides","_getTestBedViewEngine","getTestBed","ɵclearOverrides","_assertNotInstantiated","_createCompilerAndModule","moduleAndComponentFactories","_initIfNeeded","errorCompType","compFactory","templateOf","ɵoverrideComponentView","shouldCoalesceEventChangeDetection","ngZoneInjector","TestBed","entry","rootScopeImports","args","jit","ɵINJECTOR_SCOPE","compilerFactory","createTestingCompiler","overrideProviderImpl","deprecated","dep","depToken","depFlags","Optional","SkipSelf","ɵoverrideProvider","deprecatedBehavior","OverrideComponent","selector","ɵivyEnabled","completer","InjectSetupWrapper","_moduleDef","_addModule","_global$1","beforeEach","__core_private_testing_placeholder__","async","discardPeriodicTasks","discardPeriodicTasksFallback","pendingPeriodicTimers","fakeAsync","fakeAsyncFallback","_i","lastProxyZoneSpec","lockDatePatch","pendingTimers","flush","maxTurns","flushFallback","tick","millis","tickOptions","processNewMacroTasksSynchronously","tickFallback","withModule","ɵMetadataOverrider","ɵTestingCompiler","ɵTestingCompilerFactory","ɵangular_packages_core_testing_testing_a","ɵangular_packages_core_testing_testing_b","ɵangular_packages_core_testing_testing_c"],"mappings":"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","sourcesContent":["/**\n * @license Angular v10.1.5\n * (c) 2010-2020 Google LLC. https://angular.io/\n * License: MIT\n */\n\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/compiler')) :\n    typeof define === 'function' && define.amd ? define('@angular/core/testing', ['exports', '@angular/core', '@angular/compiler'], factory) :\n    (global = global || self, factory((global.ng = global.ng || {}, global.ng.core = global.ng.core || {}, global.ng.core.testing = {}), global.ng.core, global.ng.compiler));\n}(this, (function (exports, core, compiler) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global = (typeof window === 'undefined' ? global : window);\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', async(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     *\n     */\n    function asyncFallback(fn) {\n        // If we're running using the Jasmine test framework, adapt to call the 'done'\n        // function when asynchronous activity is finished.\n        if (_global.jasmine) {\n            // Not using an arrow function to preserve context passed from call site\n            return function (done) {\n                if (!done) {\n                    // if we run beforeEach in @angular/core/testing/testing_internal then we get no done\n                    // fake it here and assume sync.\n                    done = function () { };\n                    done.fail = function (e) {\n                        throw e;\n                    };\n                }\n                runInTestZone(fn, this, done, function (err) {\n                    if (typeof err === 'string') {\n                        return done.fail(new Error(err));\n                    }\n                    else {\n                        done.fail(err);\n                    }\n                });\n            };\n        }\n        // Otherwise, return a promise which will resolve when asynchronous activity\n        // is finished. This will be correctly consumed by the Mocha framework with\n        // it('...', async(myFn)); or can be used in a custom framework.\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var _this = this;\n            return new Promise(function (finishCallback, failCallback) {\n                runInTestZone(fn, _this, finishCallback, failCallback);\n            });\n        };\n    }\n    function runInTestZone(fn, context, finishCallback, failCallback) {\n        var currentZone = Zone.current;\n        var AsyncTestZoneSpec = Zone['AsyncTestZoneSpec'];\n        if (AsyncTestZoneSpec === undefined) {\n            throw new Error('AsyncTestZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/async-test.js');\n        }\n        var ProxyZoneSpec = Zone['ProxyZoneSpec'];\n        if (ProxyZoneSpec === undefined) {\n            throw new Error('ProxyZoneSpec is needed for the async() test helper but could not be found. ' +\n                'Please make sure that your environment includes zone.js/dist/proxy.js');\n        }\n        var proxyZoneSpec = ProxyZoneSpec.get();\n        ProxyZoneSpec.assertPresent();\n        // We need to create the AsyncTestZoneSpec outside the ProxyZone.\n        // If we do it in ProxyZone then we will get to infinite recursion.\n        var proxyZone = Zone.current.getZoneWith('ProxyZoneSpec');\n        var previousDelegate = proxyZoneSpec.getDelegate();\n        proxyZone.parent.run(function () {\n            var testZoneSpec = new AsyncTestZoneSpec(function () {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    finishCallback();\n                });\n            }, function (error) {\n                // Need to restore the original zone.\n                currentZone.run(function () {\n                    if (proxyZoneSpec.getDelegate() == testZoneSpec) {\n                        // Only reset the zone spec if it's sill this one. Otherwise, assume it's OK.\n                        proxyZoneSpec.setDelegate(previousDelegate);\n                    }\n                    failCallback(error);\n                });\n            }, 'test');\n            proxyZoneSpec.setDelegate(testZoneSpec);\n        });\n        return Zone.current.runGuarded(fn, context);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Wraps a test function in an asynchronous test zone. The test will automatically\n     * complete when all asynchronous calls within this zone are done. Can be used\n     * to wrap an {@link inject} call.\n     *\n     * Example:\n     *\n     * ```\n     * it('...', waitForAsync(inject([AClass], (object) => {\n     *   object.doSomething.then(() => {\n     *     expect(...);\n     *   })\n     * });\n     * ```\n     *\n     * @publicApi\n     */\n    function waitForAsync(fn) {\n        var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n        if (!_Zone) {\n            return function () {\n                return Promise.reject('Zone is needed for the waitForAsync() test helper but could not be found. ' +\n                    'Please make sure that your environment includes zone.js/dist/zone.js');\n            };\n        }\n        var asyncTest = _Zone && _Zone[_Zone.__symbol__('asyncTest')];\n        if (typeof asyncTest === 'function') {\n            return asyncTest(fn);\n        }\n        // not using new version of zone.js\n        // TODO @JiaLiPassion, remove this after all library updated to\n        // newest version of zone.js(0.8.25)\n        return asyncFallback(fn);\n    }\n    /**\n     * @deprecated use `waitForAsync()`, (expected removal in v12)\n     * @see {@link waitForAsync}\n     * @publicApi\n     * */\n    function async(fn) {\n        return waitForAsync(fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Fixture for debugging and testing a component.\n     *\n     * @publicApi\n     */\n    var ComponentFixture = /** @class */ (function () {\n        function ComponentFixture(componentRef, ngZone, _autoDetect) {\n            var _this = this;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            this._autoDetect = _autoDetect;\n            this._isStable = true;\n            this._isDestroyed = false;\n            this._resolve = null;\n            this._promise = null;\n            this._onUnstableSubscription = null;\n            this._onStableSubscription = null;\n            this._onMicrotaskEmptySubscription = null;\n            this._onErrorSubscription = null;\n            this.changeDetectorRef = componentRef.changeDetectorRef;\n            this.elementRef = componentRef.location;\n            this.debugElement = core.getDebugNode(this.elementRef.nativeElement);\n            this.componentInstance = componentRef.instance;\n            this.nativeElement = this.elementRef.nativeElement;\n            this.componentRef = componentRef;\n            this.ngZone = ngZone;\n            if (ngZone) {\n                // Create subscriptions outside the NgZone so that the callbacks run oustide\n                // of NgZone.\n                ngZone.runOutsideAngular(function () {\n                    _this._onUnstableSubscription = ngZone.onUnstable.subscribe({\n                        next: function () {\n                            _this._isStable = false;\n                        }\n                    });\n                    _this._onMicrotaskEmptySubscription = ngZone.onMicrotaskEmpty.subscribe({\n                        next: function () {\n                            if (_this._autoDetect) {\n                                // Do a change detection run with checkNoChanges set to true to check\n                                // there are no changes on the second run.\n                                _this.detectChanges(true);\n                            }\n                        }\n                    });\n                    _this._onStableSubscription = ngZone.onStable.subscribe({\n                        next: function () {\n                            _this._isStable = true;\n                            // Check whether there is a pending whenStable() completer to resolve.\n                            if (_this._promise !== null) {\n                                // If so check whether there are no pending macrotasks before resolving.\n                                // Do this check in the next tick so that ngZone gets a chance to update the state of\n                                // pending macrotasks.\n                                scheduleMicroTask(function () {\n                                    if (!ngZone.hasPendingMacrotasks) {\n                                        if (_this._promise !== null) {\n                                            _this._resolve(true);\n                                            _this._resolve = null;\n                                            _this._promise = null;\n                                        }\n                                    }\n                                });\n                            }\n                        }\n                    });\n                    _this._onErrorSubscription = ngZone.onError.subscribe({\n                        next: function (error) {\n                            throw error;\n                        }\n                    });\n                });\n            }\n        }\n        ComponentFixture.prototype._tick = function (checkNoChanges) {\n            this.changeDetectorRef.detectChanges();\n            if (checkNoChanges) {\n                this.checkNoChanges();\n            }\n        };\n        /**\n         * Trigger a change detection cycle for the component.\n         */\n        ComponentFixture.prototype.detectChanges = function (checkNoChanges) {\n            var _this = this;\n            if (checkNoChanges === void 0) { checkNoChanges = true; }\n            if (this.ngZone != null) {\n                // Run the change detection inside the NgZone so that any async tasks as part of the change\n                // detection are captured by the zone and can be waited for in isStable.\n                this.ngZone.run(function () {\n                    _this._tick(checkNoChanges);\n                });\n            }\n            else {\n                // Running without zone. Just do the change detection.\n                this._tick(checkNoChanges);\n            }\n        };\n        /**\n         * Do a change detection run to make sure there were no changes.\n         */\n        ComponentFixture.prototype.checkNoChanges = function () {\n            this.changeDetectorRef.checkNoChanges();\n        };\n        /**\n         * Set whether the fixture should autodetect changes.\n         *\n         * Also runs detectChanges once so that any existing change is detected.\n         */\n        ComponentFixture.prototype.autoDetectChanges = function (autoDetect) {\n            if (autoDetect === void 0) { autoDetect = true; }\n            if (this.ngZone == null) {\n                throw new Error('Cannot call autoDetectChanges when ComponentFixtureNoNgZone is set');\n            }\n            this._autoDetect = autoDetect;\n            this.detectChanges();\n        };\n        /**\n         * Return whether the fixture is currently stable or has async tasks that have not been completed\n         * yet.\n         */\n        ComponentFixture.prototype.isStable = function () {\n            return this._isStable && !this.ngZone.hasPendingMacrotasks;\n        };\n        /**\n         * Get a promise that resolves when the fixture is stable.\n         *\n         * This can be used to resume testing after events have triggered asynchronous activity or\n         * asynchronous change detection.\n         */\n        ComponentFixture.prototype.whenStable = function () {\n            var _this = this;\n            if (this.isStable()) {\n                return Promise.resolve(false);\n            }\n            else if (this._promise !== null) {\n                return this._promise;\n            }\n            else {\n                this._promise = new Promise(function (res) {\n                    _this._resolve = res;\n                });\n                return this._promise;\n            }\n        };\n        ComponentFixture.prototype._getRenderer = function () {\n            if (this._renderer === undefined) {\n                this._renderer = this.componentRef.injector.get(core.RendererFactory2, null);\n            }\n            return this._renderer;\n        };\n        /**\n         * Get a promise that resolves when the ui state is stable following animations.\n         */\n        ComponentFixture.prototype.whenRenderingDone = function () {\n            var renderer = this._getRenderer();\n            if (renderer && renderer.whenRenderingDone) {\n                return renderer.whenRenderingDone();\n            }\n            return this.whenStable();\n        };\n        /**\n         * Trigger component destruction.\n         */\n        ComponentFixture.prototype.destroy = function () {\n            if (!this._isDestroyed) {\n                this.componentRef.destroy();\n                if (this._onUnstableSubscription != null) {\n                    this._onUnstableSubscription.unsubscribe();\n                    this._onUnstableSubscription = null;\n                }\n                if (this._onStableSubscription != null) {\n                    this._onStableSubscription.unsubscribe();\n                    this._onStableSubscription = null;\n                }\n                if (this._onMicrotaskEmptySubscription != null) {\n                    this._onMicrotaskEmptySubscription.unsubscribe();\n                    this._onMicrotaskEmptySubscription = null;\n                }\n                if (this._onErrorSubscription != null) {\n                    this._onErrorSubscription.unsubscribe();\n                    this._onErrorSubscription = null;\n                }\n                this._isDestroyed = true;\n            }\n        };\n        return ComponentFixture;\n    }());\n    function scheduleMicroTask(fn) {\n        Zone.current.scheduleMicroTask('scheduleMicrotask', fn);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * fakeAsync has been moved to zone.js\n     * this file is for fallback in case old version of zone.js is used\n     */\n    var _Zone = typeof Zone !== 'undefined' ? Zone : null;\n    var FakeAsyncTestZoneSpec = _Zone && _Zone['FakeAsyncTestZoneSpec'];\n    var ProxyZoneSpec = _Zone && _Zone['ProxyZoneSpec'];\n    var _fakeAsyncTestZoneSpec = null;\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZoneFallback() {\n        if (_fakeAsyncTestZoneSpec) {\n            _fakeAsyncTestZoneSpec.unlockDatePatch();\n        }\n        _fakeAsyncTestZoneSpec = null;\n        // in node.js testing we may not have ProxyZoneSpec in which case there is nothing to reset.\n        ProxyZoneSpec && ProxyZoneSpec.assertPresent().resetDelegate();\n    }\n    var _inFakeAsyncCall = false;\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsyncFallback(fn) {\n        // Not using an arrow function to preserve context passed from call site\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var proxyZoneSpec = ProxyZoneSpec.assertPresent();\n            if (_inFakeAsyncCall) {\n                throw new Error('fakeAsync() calls can not be nested');\n            }\n            _inFakeAsyncCall = true;\n            try {\n                if (!_fakeAsyncTestZoneSpec) {\n                    if (proxyZoneSpec.getDelegate() instanceof FakeAsyncTestZoneSpec) {\n                        throw new Error('fakeAsync() calls can not be nested');\n                    }\n                    _fakeAsyncTestZoneSpec = new FakeAsyncTestZoneSpec();\n                }\n                var res = void 0;\n                var lastProxyZoneSpec = proxyZoneSpec.getDelegate();\n                proxyZoneSpec.setDelegate(_fakeAsyncTestZoneSpec);\n                _fakeAsyncTestZoneSpec.lockDatePatch();\n                try {\n                    res = fn.apply(this, args);\n                    flushMicrotasksFallback();\n                }\n                finally {\n                    proxyZoneSpec.setDelegate(lastProxyZoneSpec);\n                }\n                if (_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingPeriodicTimers.length + \" \" +\n                        \"periodic timer(s) still in the queue.\");\n                }\n                if (_fakeAsyncTestZoneSpec.pendingTimers.length > 0) {\n                    throw new Error(_fakeAsyncTestZoneSpec.pendingTimers.length + \" timer(s) still in the queue.\");\n                }\n                return res;\n            }\n            finally {\n                _inFakeAsyncCall = false;\n                resetFakeAsyncZoneFallback();\n            }\n        };\n    }\n    function _getFakeAsyncZoneSpec() {\n        if (_fakeAsyncTestZoneSpec == null) {\n            throw new Error('The code should be running in the fakeAsync zone to call this function');\n        }\n        return _fakeAsyncTestZoneSpec;\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @publicApi\n     */\n    function tickFallback(millis, tickOptions) {\n        if (millis === void 0) { millis = 0; }\n        if (tickOptions === void 0) { tickOptions = {\n            processNewMacroTasksSynchronously: true\n        }; }\n        _getFakeAsyncZoneSpec().tick(millis, null, tickOptions);\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flushFallback(maxTurns) {\n        return _getFakeAsyncZoneSpec().flush(maxTurns);\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasksFallback() {\n        var zoneSpec = _getFakeAsyncZoneSpec();\n        zoneSpec.pendingPeriodicTimers.length = 0;\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasksFallback() {\n        _getFakeAsyncZoneSpec().flushMicrotasks();\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _Zone$1 = typeof Zone !== 'undefined' ? Zone : null;\n    var fakeAsyncTestModule = _Zone$1 && _Zone$1[_Zone$1.__symbol__('fakeAsyncTest')];\n    /**\n     * Clears out the shared fake async zone for a test.\n     * To be called in a global `beforeEach`.\n     *\n     * @publicApi\n     */\n    function resetFakeAsyncZone() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.resetFakeAsyncZone();\n        }\n        else {\n            return resetFakeAsyncZoneFallback();\n        }\n    }\n    /**\n     * Wraps a function to be executed in the fakeAsync zone:\n     * - microtasks are manually executed by calling `flushMicrotasks()`,\n     * - timers are synchronous, `tick()` simulates the asynchronous passage of time.\n     *\n     * If there are any pending timers at the end of the function, an exception will be thrown.\n     *\n     * Can be used to wrap inject() calls.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param fn\n     * @returns The function wrapped to be executed in the fakeAsync zone\n     *\n     * @publicApi\n     */\n    function fakeAsync(fn) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.fakeAsync(fn);\n        }\n        else {\n            return fakeAsyncFallback(fn);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone.\n     *\n     * The microtasks queue is drained at the very start of this function and after any timer callback\n     * has been executed.\n     *\n     * @usageNotes\n     * ### Example\n     *\n     * {@example core/testing/ts/fake_async.ts region='basic'}\n     *\n     * @param millis, the number of millisecond to advance the virtual timer\n     * @param tickOptions, the options of tick with a flag called\n     * processNewMacroTasksSynchronously, whether to invoke the new macroTasks, by default is\n     * false, means the new macroTasks will be invoked\n     *\n     * For example,\n     *\n     * it ('test with nested setTimeout', fakeAsync(() => {\n     *   let nestedTimeoutInvoked = false;\n     *   function funcWithNestedTimeout() {\n     *     setTimeout(() => {\n     *       nestedTimeoutInvoked = true;\n     *     });\n     *   };\n     *   setTimeout(funcWithNestedTimeout);\n     *   tick();\n     *   expect(nestedTimeoutInvoked).toBe(true);\n     * }));\n     *\n     * in this case, we have a nested timeout (new macroTask), when we tick, both the\n     * funcWithNestedTimeout and the nested timeout both will be invoked.\n     *\n     * it ('test with nested setTimeout', fakeAsync(() => {\n     *   let nestedTimeoutInvoked = false;\n     *   function funcWithNestedTimeout() {\n     *     setTimeout(() => {\n     *       nestedTimeoutInvoked = true;\n     *     });\n     *   };\n     *   setTimeout(funcWithNestedTimeout);\n     *   tick(0, {processNewMacroTasksSynchronously: false});\n     *   expect(nestedTimeoutInvoked).toBe(false);\n     * }));\n     *\n     * if we pass the tickOptions with processNewMacroTasksSynchronously to be false, the nested timeout\n     * will not be invoked.\n     *\n     *\n     * @publicApi\n     */\n    function tick(millis, tickOptions) {\n        if (millis === void 0) { millis = 0; }\n        if (tickOptions === void 0) { tickOptions = {\n            processNewMacroTasksSynchronously: true\n        }; }\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.tick(millis, tickOptions);\n        }\n        else {\n            return tickFallback(millis, tickOptions);\n        }\n    }\n    /**\n     * Simulates the asynchronous passage of time for the timers in the fakeAsync zone by\n     * draining the macrotask queue until it is empty. The returned value is the milliseconds\n     * of time that would have been elapsed.\n     *\n     * @param maxTurns\n     * @returns The simulated time elapsed, in millis.\n     *\n     * @publicApi\n     */\n    function flush(maxTurns) {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flush(maxTurns);\n        }\n        else {\n            return flushFallback(maxTurns);\n        }\n    }\n    /**\n     * Discard all remaining periodic tasks.\n     *\n     * @publicApi\n     */\n    function discardPeriodicTasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.discardPeriodicTasks();\n        }\n        else {\n            discardPeriodicTasksFallback();\n        }\n    }\n    /**\n     * Flush any pending microtasks.\n     *\n     * @publicApi\n     */\n    function flushMicrotasks() {\n        if (fakeAsyncTestModule) {\n            return fakeAsyncTestModule.flushMicrotasks();\n        }\n        else {\n            return flushMicrotasksFallback();\n        }\n    }\n\n    /*! *****************************************************************************\n    Copyright (c) Microsoft Corporation.\n\n    Permission to use, copy, modify, and/or distribute this software for any\n    purpose with or without fee is hereby granted.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n    PERFORMANCE OF THIS SOFTWARE.\n    ***************************************************************************** */\n    /* global Reflect, Promise */\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b)\n                if (b.hasOwnProperty(p))\n                    d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    function __extends(d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    }\n    var __assign = function () {\n        __assign = Object.assign || function __assign(t) {\n            for (var s, i = 1, n = arguments.length; i < n; i++) {\n                s = arguments[i];\n                for (var p in s)\n                    if (Object.prototype.hasOwnProperty.call(s, p))\n                        t[p] = s[p];\n            }\n            return t;\n        };\n        return __assign.apply(this, arguments);\n    };\n    function __rest(s, e) {\n        var t = {};\n        for (var p in s)\n            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n                t[p] = s[p];\n        if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                    t[p[i]] = s[p[i]];\n            }\n        return t;\n    }\n    function __decorate(decorators, target, key, desc) {\n        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n        if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\n            r = Reflect.decorate(decorators, target, key, desc);\n        else\n            for (var i = decorators.length - 1; i >= 0; i--)\n                if (d = decorators[i])\n                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n        return c > 3 && r && Object.defineProperty(target, key, r), r;\n    }\n    function __param(paramIndex, decorator) {\n        return function (target, key) { decorator(target, key, paramIndex); };\n    }\n    function __metadata(metadataKey, metadataValue) {\n        if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\n            return Reflect.metadata(metadataKey, metadataValue);\n    }\n    function __awaiter(thisArg, _arguments, P, generator) {\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n        return new (P || (P = Promise))(function (resolve, reject) {\n            function fulfilled(value) { try {\n                step(generator.next(value));\n            }\n            catch (e) {\n                reject(e);\n            } }\n            function rejected(value) { try {\n                step(generator[\"throw\"](value));\n            }\n            catch (e) {\n                reject(e);\n            } }\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\n        });\n    }\n    function __generator(thisArg, body) {\n        var _ = { label: 0, sent: function () { if (t[0] & 1)\n                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () { return this; }), g;\n        function verb(n) { return function (v) { return step([n, v]); }; }\n        function step(op) {\n            if (f)\n                throw new TypeError(\"Generator is already executing.\");\n            while (_)\n                try {\n                    if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)\n                        return t;\n                    if (y = 0, t)\n                        op = [op[0] & 2, t.value];\n                    switch (op[0]) {\n                        case 0:\n                        case 1:\n                            t = op;\n                            break;\n                        case 4:\n                            _.label++;\n                            return { value: op[1], done: false };\n                        case 5:\n                            _.label++;\n                            y = op[1];\n                            op = [0];\n                            continue;\n                        case 7:\n                            op = _.ops.pop();\n                            _.trys.pop();\n                            continue;\n                        default:\n                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n                                _ = 0;\n                                continue;\n                            }\n                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {\n                                _.label = op[1];\n                                break;\n                            }\n                            if (op[0] === 6 && _.label < t[1]) {\n                                _.label = t[1];\n                                t = op;\n                                break;\n                            }\n                            if (t && _.label < t[2]) {\n                                _.label = t[2];\n                                _.ops.push(op);\n                                break;\n                            }\n                            if (t[2])\n                                _.ops.pop();\n                            _.trys.pop();\n                            continue;\n                    }\n                    op = body.call(thisArg, _);\n                }\n                catch (e) {\n                    op = [6, e];\n                    y = 0;\n                }\n                finally {\n                    f = t = 0;\n                }\n            if (op[0] & 5)\n                throw op[1];\n            return { value: op[0] ? op[1] : void 0, done: true };\n        }\n    }\n    var __createBinding = Object.create ? (function (o, m, k, k2) {\n        if (k2 === undefined)\n            k2 = k;\n        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });\n    }) : (function (o, m, k, k2) {\n        if (k2 === undefined)\n            k2 = k;\n        o[k2] = m[k];\n    });\n    function __exportStar(m, exports) {\n        for (var p in m)\n            if (p !== \"default\" && !exports.hasOwnProperty(p))\n                __createBinding(exports, m, p);\n    }\n    function __values(o) {\n        var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n        if (m)\n            return m.call(o);\n        if (o && typeof o.length === \"number\")\n            return {\n                next: function () {\n                    if (o && i >= o.length)\n                        o = void 0;\n                    return { value: o && o[i++], done: !o };\n                }\n            };\n        throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n    }\n    function __read(o, n) {\n        var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n        if (!m)\n            return o;\n        var i = m.call(o), r, ar = [], e;\n        try {\n            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)\n                ar.push(r.value);\n        }\n        catch (error) {\n            e = { error: error };\n        }\n        finally {\n            try {\n                if (r && !r.done && (m = i[\"return\"]))\n                    m.call(i);\n            }\n            finally {\n                if (e)\n                    throw e.error;\n            }\n        }\n        return ar;\n    }\n    function __spread() {\n        for (var ar = [], i = 0; i < arguments.length; i++)\n            ar = ar.concat(__read(arguments[i]));\n        return ar;\n    }\n    function __spreadArrays() {\n        for (var s = 0, i = 0, il = arguments.length; i < il; i++)\n            s += arguments[i].length;\n        for (var r = Array(s), k = 0, i = 0; i < il; i++)\n            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n                r[k] = a[j];\n        return r;\n    }\n    ;\n    function __await(v) {\n        return this instanceof __await ? (this.v = v, this) : new __await(v);\n    }\n    function __asyncGenerator(thisArg, _arguments, generator) {\n        if (!Symbol.asyncIterator)\n            throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n        var g = generator.apply(thisArg, _arguments || []), i, q = [];\n        return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n        function verb(n) { if (g[n])\n            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n        function resume(n, v) { try {\n            step(g[n](v));\n        }\n        catch (e) {\n            settle(q[0][3], e);\n        } }\n        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n        function fulfill(value) { resume(\"next\", value); }\n        function reject(value) { resume(\"throw\", value); }\n        function settle(f, v) { if (f(v), q.shift(), q.length)\n            resume(q[0][0], q[0][1]); }\n    }\n    function __asyncDelegator(o) {\n        var i, p;\n        return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\n    }\n    function __asyncValues(o) {\n        if (!Symbol.asyncIterator)\n            throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n        var m = o[Symbol.asyncIterator], i;\n        return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }\n    }\n    function __makeTemplateObject(cooked, raw) {\n        if (Object.defineProperty) {\n            Object.defineProperty(cooked, \"raw\", { value: raw });\n        }\n        else {\n            cooked.raw = raw;\n        }\n        return cooked;\n    }\n    ;\n    var __setModuleDefault = Object.create ? (function (o, v) {\n        Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n    }) : function (o, v) {\n        o[\"default\"] = v;\n    };\n    function __importStar(mod) {\n        if (mod && mod.__esModule)\n            return mod;\n        var result = {};\n        if (mod != null)\n            for (var k in mod)\n                if (Object.hasOwnProperty.call(mod, k))\n                    __createBinding(result, mod, k);\n        __setModuleDefault(result, mod);\n        return result;\n    }\n    function __importDefault(mod) {\n        return (mod && mod.__esModule) ? mod : { default: mod };\n    }\n    function __classPrivateFieldGet(receiver, privateMap) {\n        if (!privateMap.has(receiver)) {\n            throw new TypeError(\"attempted to get private field on non-instance\");\n        }\n        return privateMap.get(receiver);\n    }\n    function __classPrivateFieldSet(receiver, privateMap, value) {\n        if (!privateMap.has(receiver)) {\n            throw new TypeError(\"attempted to set private field on non-instance\");\n        }\n        privateMap.set(receiver, value);\n        return value;\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Injectable completer that allows signaling completion of an asynchronous test. Used internally.\n     */\n    var AsyncTestCompleter = /** @class */ (function () {\n        function AsyncTestCompleter() {\n            var _this = this;\n            this._promise = new Promise(function (res, rej) {\n                _this._resolve = res;\n                _this._reject = rej;\n            });\n        }\n        AsyncTestCompleter.prototype.done = function (value) {\n            this._resolve(value);\n        };\n        AsyncTestCompleter.prototype.fail = function (error, stackTrace) {\n            this._reject(error);\n        };\n        Object.defineProperty(AsyncTestCompleter.prototype, \"promise\", {\n            get: function () {\n                return this._promise;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return AsyncTestCompleter;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * Used to resolve resource URLs on `@Component` when used with JIT compilation.\n     *\n     * Example:\n     * ```\n     * @Component({\n     *   selector: 'my-comp',\n     *   templateUrl: 'my-comp.html', // This requires asynchronous resolution\n     * })\n     * class MyComponent{\n     * }\n     *\n     * // Calling `renderComponent` will fail because `renderComponent` is a synchronous process\n     * // and `MyComponent`'s `@Component.templateUrl` needs to be resolved asynchronously.\n     *\n     * // Calling `resolveComponentResources()` will resolve `@Component.templateUrl` into\n     * // `@Component.template`, which allows `renderComponent` to proceed in a synchronous manner.\n     *\n     * // Use browser's `fetch()` function as the default resource resolution strategy.\n     * resolveComponentResources(fetch).then(() => {\n     *   // After resolution all URLs have been converted into `template` strings.\n     *   renderComponent(MyComponent);\n     * });\n     *\n     * ```\n     *\n     * NOTE: In AOT the resolution happens during compilation, and so there should be no need\n     * to call this method outside JIT mode.\n     *\n     * @param resourceResolver a function which is responsible for returning a `Promise` to the\n     * contents of the resolved URL. Browser's `fetch()` method is a good default implementation.\n     */\n    function resolveComponentResources(resourceResolver) {\n        // Store all promises which are fetching the resources.\n        var componentResolved = [];\n        // Cache so that we don't fetch the same resource more than once.\n        var urlMap = new Map();\n        function cachedResourceResolve(url) {\n            var promise = urlMap.get(url);\n            if (!promise) {\n                var resp = resourceResolver(url);\n                urlMap.set(url, promise = resp.then(unwrapResponse));\n            }\n            return promise;\n        }\n        componentResourceResolutionQueue.forEach(function (component, type) {\n            var promises = [];\n            if (component.templateUrl) {\n                promises.push(cachedResourceResolve(component.templateUrl).then(function (template) {\n                    component.template = template;\n                }));\n            }\n            var styleUrls = component.styleUrls;\n            var styles = component.styles || (component.styles = []);\n            var styleOffset = component.styles.length;\n            styleUrls && styleUrls.forEach(function (styleUrl, index) {\n                styles.push(''); // pre-allocate array.\n                promises.push(cachedResourceResolve(styleUrl).then(function (style) {\n                    styles[styleOffset + index] = style;\n                    styleUrls.splice(styleUrls.indexOf(styleUrl), 1);\n                    if (styleUrls.length == 0) {\n                        component.styleUrls = undefined;\n                    }\n                }));\n            });\n            var fullyResolved = Promise.all(promises).then(function () { return componentDefResolved(type); });\n            componentResolved.push(fullyResolved);\n        });\n        clearResolutionOfComponentResourcesQueue();\n        return Promise.all(componentResolved).then(function () { return undefined; });\n    }\n    var componentResourceResolutionQueue = new Map();\n    // Track when existing ɵcmp for a Type is waiting on resources.\n    var componentDefPendingResolution = new Set();\n    function maybeQueueResolutionOfComponentResources(type, metadata) {\n        if (componentNeedsResolution(metadata)) {\n            componentResourceResolutionQueue.set(type, metadata);\n            componentDefPendingResolution.add(type);\n        }\n    }\n    function isComponentDefPendingResolution(type) {\n        return componentDefPendingResolution.has(type);\n    }\n    function componentNeedsResolution(component) {\n        return !!((component.templateUrl && !component.hasOwnProperty('template')) ||\n            component.styleUrls && component.styleUrls.length);\n    }\n    function clearResolutionOfComponentResourcesQueue() {\n        var old = componentResourceResolutionQueue;\n        componentResourceResolutionQueue = new Map();\n        return old;\n    }\n    function restoreComponentResolutionQueue(queue) {\n        componentDefPendingResolution.clear();\n        queue.forEach(function (_, type) { return componentDefPendingResolution.add(type); });\n        componentResourceResolutionQueue = queue;\n    }\n    function isComponentResourceResolutionQueueEmpty() {\n        return componentResourceResolutionQueue.size === 0;\n    }\n    function unwrapResponse(response) {\n        return typeof response == 'string' ? response : response.text();\n    }\n    function componentDefResolved(type) {\n        componentDefPendingResolution.delete(type);\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextReferenceId = 0;\n    var MetadataOverrider = /** @class */ (function () {\n        function MetadataOverrider() {\n            this._references = new Map();\n        }\n        /**\n         * Creates a new instance for the given metadata class\n         * based on an old instance and overrides.\n         */\n        MetadataOverrider.prototype.overrideMetadata = function (metadataClass, oldMetadata, override) {\n            var props = {};\n            if (oldMetadata) {\n                _valueProps(oldMetadata).forEach(function (prop) { return props[prop] = oldMetadata[prop]; });\n            }\n            if (override.set) {\n                if (override.remove || override.add) {\n                    throw new Error(\"Cannot set and add/remove \" + core.ɵstringify(metadataClass) + \" at the same time!\");\n                }\n                setMetadata(props, override.set);\n            }\n            if (override.remove) {\n                removeMetadata(props, override.remove, this._references);\n            }\n            if (override.add) {\n                addMetadata(props, override.add);\n            }\n            return new metadataClass(props);\n        };\n        return MetadataOverrider;\n    }());\n    function removeMetadata(metadata, remove, references) {\n        var removeObjects = new Set();\n        var _loop_1 = function (prop) {\n            var removeValue = remove[prop];\n            if (Array.isArray(removeValue)) {\n                removeValue.forEach(function (value) {\n                    removeObjects.add(_propHashKey(prop, value, references));\n                });\n            }\n            else {\n                removeObjects.add(_propHashKey(prop, removeValue, references));\n            }\n        };\n        for (var prop in remove) {\n            _loop_1(prop);\n        }\n        var _loop_2 = function (prop) {\n            var propValue = metadata[prop];\n            if (Array.isArray(propValue)) {\n                metadata[prop] = propValue.filter(function (value) { return !removeObjects.has(_propHashKey(prop, value, references)); });\n            }\n            else {\n                if (removeObjects.has(_propHashKey(prop, propValue, references))) {\n                    metadata[prop] = undefined;\n                }\n            }\n        };\n        for (var prop in metadata) {\n            _loop_2(prop);\n        }\n    }\n    function addMetadata(metadata, add) {\n        for (var prop in add) {\n            var addValue = add[prop];\n            var propValue = metadata[prop];\n            if (propValue != null && Array.isArray(propValue)) {\n                metadata[prop] = propValue.concat(addValue);\n            }\n            else {\n                metadata[prop] = addValue;\n            }\n        }\n    }\n    function setMetadata(metadata, set) {\n        for (var prop in set) {\n            metadata[prop] = set[prop];\n        }\n    }\n    function _propHashKey(propName, propValue, references) {\n        var replacer = function (key, value) {\n            if (typeof value === 'function') {\n                value = _serializeReference(value, references);\n            }\n            return value;\n        };\n        return propName + \":\" + JSON.stringify(propValue, replacer);\n    }\n    function _serializeReference(ref, references) {\n        var id = references.get(ref);\n        if (!id) {\n            id = \"\" + core.ɵstringify(ref) + _nextReferenceId++;\n            references.set(ref, id);\n        }\n        return id;\n    }\n    function _valueProps(obj) {\n        var props = [];\n        // regular public props\n        Object.keys(obj).forEach(function (prop) {\n            if (!prop.startsWith('_')) {\n                props.push(prop);\n            }\n        });\n        // getters\n        var proto = obj;\n        while (proto = Object.getPrototypeOf(proto)) {\n            Object.keys(proto).forEach(function (protoProp) {\n                var desc = Object.getOwnPropertyDescriptor(proto, protoProp);\n                if (!protoProp.startsWith('_') && desc && 'get' in desc) {\n                    props.push(protoProp);\n                }\n            });\n        }\n        return props;\n    }\n\n    var reflection = new core.ɵReflectionCapabilities();\n    /**\n     * Allows to override ivy metadata for tests (via the `TestBed`).\n     */\n    var OverrideResolver = /** @class */ (function () {\n        function OverrideResolver() {\n            this.overrides = new Map();\n            this.resolved = new Map();\n        }\n        OverrideResolver.prototype.addOverride = function (type, override) {\n            var overrides = this.overrides.get(type) || [];\n            overrides.push(override);\n            this.overrides.set(type, overrides);\n            this.resolved.delete(type);\n        };\n        OverrideResolver.prototype.setOverrides = function (overrides) {\n            var _this = this;\n            this.overrides.clear();\n            overrides.forEach(function (_a) {\n                var _b = __read(_a, 2), type = _b[0], override = _b[1];\n                _this.addOverride(type, override);\n            });\n        };\n        OverrideResolver.prototype.getAnnotation = function (type) {\n            var annotations = reflection.annotations(type);\n            // Try to find the nearest known Type annotation and make sure that this annotation is an\n            // instance of the type we are looking for, so we can use it for resolution. Note: there might\n            // be multiple known annotations found due to the fact that Components can extend Directives (so\n            // both Directive and Component annotations would be present), so we always check if the known\n            // annotation has the right type.\n            for (var i = annotations.length - 1; i >= 0; i--) {\n                var annotation = annotations[i];\n                var isKnownType = annotation instanceof core.Directive || annotation instanceof core.Component ||\n                    annotation instanceof core.Pipe || annotation instanceof core.NgModule;\n                if (isKnownType) {\n                    return annotation instanceof this.type ? annotation : null;\n                }\n            }\n            return null;\n        };\n        OverrideResolver.prototype.resolve = function (type) {\n            var _this = this;\n            var resolved = this.resolved.get(type) || null;\n            if (!resolved) {\n                resolved = this.getAnnotation(type);\n                if (resolved) {\n                    var overrides = this.overrides.get(type);\n                    if (overrides) {\n                        var overrider_1 = new MetadataOverrider();\n                        overrides.forEach(function (override) {\n                            resolved = overrider_1.overrideMetadata(_this.type, resolved, override);\n                        });\n                    }\n                }\n                this.resolved.set(type, resolved);\n            }\n            return resolved;\n        };\n        return OverrideResolver;\n    }());\n    var DirectiveResolver = /** @class */ (function (_super) {\n        __extends(DirectiveResolver, _super);\n        function DirectiveResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(DirectiveResolver.prototype, \"type\", {\n            get: function () {\n                return core.Directive;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return DirectiveResolver;\n    }(OverrideResolver));\n    var ComponentResolver = /** @class */ (function (_super) {\n        __extends(ComponentResolver, _super);\n        function ComponentResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(ComponentResolver.prototype, \"type\", {\n            get: function () {\n                return core.Component;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return ComponentResolver;\n    }(OverrideResolver));\n    var PipeResolver = /** @class */ (function (_super) {\n        __extends(PipeResolver, _super);\n        function PipeResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(PipeResolver.prototype, \"type\", {\n            get: function () {\n                return core.Pipe;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return PipeResolver;\n    }(OverrideResolver));\n    var NgModuleResolver = /** @class */ (function (_super) {\n        __extends(NgModuleResolver, _super);\n        function NgModuleResolver() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(NgModuleResolver.prototype, \"type\", {\n            get: function () {\n                return core.NgModule;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return NgModuleResolver;\n    }(OverrideResolver));\n\n    var TestingModuleOverride;\n    (function (TestingModuleOverride) {\n        TestingModuleOverride[TestingModuleOverride[\"DECLARATION\"] = 0] = \"DECLARATION\";\n        TestingModuleOverride[TestingModuleOverride[\"OVERRIDE_TEMPLATE\"] = 1] = \"OVERRIDE_TEMPLATE\";\n    })(TestingModuleOverride || (TestingModuleOverride = {}));\n    function isTestingModuleOverride(value) {\n        return value === TestingModuleOverride.DECLARATION ||\n            value === TestingModuleOverride.OVERRIDE_TEMPLATE;\n    }\n    var R3TestBedCompiler = /** @class */ (function () {\n        function R3TestBedCompiler(platform, additionalModuleTypes) {\n            this.platform = platform;\n            this.additionalModuleTypes = additionalModuleTypes;\n            this.originalComponentResolutionQueue = null;\n            // Testing module configuration\n            this.declarations = [];\n            this.imports = [];\n            this.providers = [];\n            this.schemas = [];\n            // Queues of components/directives/pipes that should be recompiled.\n            this.pendingComponents = new Set();\n            this.pendingDirectives = new Set();\n            this.pendingPipes = new Set();\n            // Keep track of all components and directives, so we can patch Providers onto defs later.\n            this.seenComponents = new Set();\n            this.seenDirectives = new Set();\n            // Keep track of overridden modules, so that we can collect all affected ones in the module tree.\n            this.overriddenModules = new Set();\n            // Store resolved styles for Components that have template overrides present and `styleUrls`\n            // defined at the same time.\n            this.existingComponentStyles = new Map();\n            this.resolvers = initResolvers();\n            this.componentToModuleScope = new Map();\n            // Map that keeps initial version of component/directive/pipe defs in case\n            // we compile a Type again, thus overriding respective static fields. This is\n            // required to make sure we restore defs to their initial states between test runs\n            // TODO: we should support the case with multiple defs on a type\n            this.initialNgDefs = new Map();\n            // Array that keeps cleanup operations for initial versions of component/directive/pipe/module\n            // defs in case TestBed makes changes to the originals.\n            this.defCleanupOps = [];\n            this._injector = null;\n            this.compilerProviders = null;\n            this.providerOverrides = [];\n            this.rootProviderOverrides = [];\n            // Overrides for injectables with `{providedIn: SomeModule}` need to be tracked and added to that\n            // module's provider list.\n            this.providerOverridesByModule = new Map();\n            this.providerOverridesByToken = new Map();\n            this.moduleProvidersOverridden = new Set();\n            this.testModuleRef = null;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                return DynamicTestModule;\n            }());\n            this.testModuleType = DynamicTestModule;\n        }\n        R3TestBedCompiler.prototype.setCompilerProviders = function (providers) {\n            this.compilerProviders = providers;\n            this._injector = null;\n        };\n        R3TestBedCompiler.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            // Enqueue any compilation tasks for the directly declared component.\n            if (moduleDef.declarations !== undefined) {\n                this.queueTypeArray(moduleDef.declarations, TestingModuleOverride.DECLARATION);\n                (_a = this.declarations).push.apply(_a, __spread(moduleDef.declarations));\n            }\n            // Enqueue any compilation tasks for imported modules.\n            if (moduleDef.imports !== undefined) {\n                this.queueTypesFromModulesArray(moduleDef.imports);\n                (_b = this.imports).push.apply(_b, __spread(moduleDef.imports));\n            }\n            if (moduleDef.providers !== undefined) {\n                (_c = this.providers).push.apply(_c, __spread(moduleDef.providers));\n            }\n            if (moduleDef.schemas !== undefined) {\n                (_d = this.schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n        };\n        R3TestBedCompiler.prototype.overrideModule = function (ngModule, override) {\n            this.overriddenModules.add(ngModule);\n            // Compile the module right away.\n            this.resolvers.module.addOverride(ngModule, override);\n            var metadata = this.resolvers.module.resolve(ngModule);\n            if (metadata === null) {\n                throw invalidTypeError(ngModule.name, 'NgModule');\n            }\n            this.recompileNgModule(ngModule, metadata);\n            // At this point, the module has a valid module def (ɵmod), but the override may have introduced\n            // new declarations or imported modules. Ingest any possible new types and add them to the\n            // current queue.\n            this.queueTypesFromModulesArray([ngModule]);\n        };\n        R3TestBedCompiler.prototype.overrideComponent = function (component, override) {\n            this.resolvers.component.addOverride(component, override);\n            this.pendingComponents.add(component);\n        };\n        R3TestBedCompiler.prototype.overrideDirective = function (directive, override) {\n            this.resolvers.directive.addOverride(directive, override);\n            this.pendingDirectives.add(directive);\n        };\n        R3TestBedCompiler.prototype.overridePipe = function (pipe, override) {\n            this.resolvers.pipe.addOverride(pipe, override);\n            this.pendingPipes.add(pipe);\n        };\n        R3TestBedCompiler.prototype.overrideProvider = function (token, provider) {\n            var providerDef;\n            if (provider.useFactory !== undefined) {\n                providerDef = {\n                    provide: token,\n                    useFactory: provider.useFactory,\n                    deps: provider.deps || [],\n                    multi: provider.multi\n                };\n            }\n            else if (provider.useValue !== undefined) {\n                providerDef = { provide: token, useValue: provider.useValue, multi: provider.multi };\n            }\n            else {\n                providerDef = { provide: token };\n            }\n            var injectableDef = typeof token !== 'string' ? core.ɵgetInjectableDef(token) : null;\n            var isRoot = injectableDef !== null && injectableDef.providedIn === 'root';\n            var overridesBucket = isRoot ? this.rootProviderOverrides : this.providerOverrides;\n            overridesBucket.push(providerDef);\n            // Keep overrides grouped by token as well for fast lookups using token\n            this.providerOverridesByToken.set(token, providerDef);\n            if (injectableDef !== null && injectableDef.providedIn !== null &&\n                typeof injectableDef.providedIn !== 'string') {\n                var existingOverrides = this.providerOverridesByModule.get(injectableDef.providedIn);\n                if (existingOverrides !== undefined) {\n                    existingOverrides.push(providerDef);\n                }\n                else {\n                    this.providerOverridesByModule.set(injectableDef.providedIn, [providerDef]);\n                }\n            }\n        };\n        R3TestBedCompiler.prototype.overrideTemplateUsingTestingModule = function (type, template) {\n            var _this = this;\n            var def = type[core.ɵNG_COMP_DEF];\n            var hasStyleUrls = function () {\n                var metadata = _this.resolvers.component.resolve(type);\n                return !!metadata.styleUrls && metadata.styleUrls.length > 0;\n            };\n            var overrideStyleUrls = !!def && !isComponentDefPendingResolution(type) && hasStyleUrls();\n            // In Ivy, compiling a component does not require knowing the module providing the\n            // component's scope, so overrideTemplateUsingTestingModule can be implemented purely via\n            // overrideComponent. Important: overriding template requires full Component re-compilation,\n            // which may fail in case styleUrls are also present (thus Component is considered as required\n            // resolution). In order to avoid this, we preemptively set styleUrls to an empty array,\n            // preserve current styles available on Component def and restore styles back once compilation\n            // is complete.\n            var override = overrideStyleUrls ? { template: template, styles: [], styleUrls: [] } : { template: template };\n            this.overrideComponent(type, { set: override });\n            if (overrideStyleUrls && def.styles && def.styles.length > 0) {\n                this.existingComponentStyles.set(type, def.styles);\n            }\n            // Set the component's scope to be the testing module.\n            this.componentToModuleScope.set(type, TestingModuleOverride.OVERRIDE_TEMPLATE);\n        };\n        R3TestBedCompiler.prototype.compileComponents = function () {\n            return __awaiter(this, void 0, void 0, function () {\n                var needsAsyncResources, resourceLoader_1, resolver;\n                var _this = this;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.clearComponentResolutionQueue();\n                            needsAsyncResources = this.compileTypesSync();\n                            if (!needsAsyncResources) return [3 /*break*/, 2];\n                            resolver = function (url) {\n                                if (!resourceLoader_1) {\n                                    resourceLoader_1 = _this.injector.get(compiler.ResourceLoader);\n                                }\n                                return Promise.resolve(resourceLoader_1.get(url));\n                            };\n                            return [4 /*yield*/, resolveComponentResources(resolver)];\n                        case 1:\n                            _a.sent();\n                            _a.label = 2;\n                        case 2: return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        R3TestBedCompiler.prototype.finalize = function () {\n            // One last compile\n            this.compileTypesSync();\n            // Create the testing module itself.\n            this.compileTestModule();\n            this.applyTransitiveScopes();\n            this.applyProviderOverrides();\n            // Patch previously stored `styles` Component values (taken from ɵcmp), in case these\n            // Components have `styleUrls` fields defined and template override was requested.\n            this.patchComponentsWithExistingStyles();\n            // Clear the componentToModuleScope map, so that future compilations don't reset the scope of\n            // every component.\n            this.componentToModuleScope.clear();\n            var parentInjector = this.platform.injector;\n            this.testModuleRef = new core.ɵRender3NgModuleRef(this.testModuleType, parentInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core.\n            // Cast it to any before accessing it.\n            this.testModuleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            // Set locale ID after running app initializers, since locale information might be updated while\n            // running initializers. This is also consistent with the execution order while bootstrapping an\n            // app (see `packages/core/src/application_ref.ts` file).\n            var localeId = this.testModuleRef.injector.get(core.LOCALE_ID, core.ɵDEFAULT_LOCALE_ID);\n            core.ɵsetLocaleId(localeId);\n            return this.testModuleRef;\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._compileNgModuleSync = function (moduleType) {\n            this.queueTypesFromModulesArray([moduleType]);\n            this.compileTypesSync();\n            this.applyProviderOverrides();\n            this.applyProviderOverridesToModule(moduleType);\n            this.applyTransitiveScopes();\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._compileNgModuleAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0:\n                            this.queueTypesFromModulesArray([moduleType]);\n                            return [4 /*yield*/, this.compileComponents()];\n                        case 1:\n                            _a.sent();\n                            this.applyProviderOverrides();\n                            this.applyProviderOverridesToModule(moduleType);\n                            this.applyTransitiveScopes();\n                            return [2 /*return*/];\n                    }\n                });\n            });\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._getModuleResolver = function () {\n            return this.resolvers.module;\n        };\n        /**\n         * @internal\n         */\n        R3TestBedCompiler.prototype._getComponentFactories = function (moduleType) {\n            var _this = this;\n            return maybeUnwrapFn(moduleType.ɵmod.declarations).reduce(function (factories, declaration) {\n                var componentDef = declaration.ɵcmp;\n                componentDef && factories.push(new core.ɵRender3ComponentFactory(componentDef, _this.testModuleRef));\n                return factories;\n            }, []);\n        };\n        R3TestBedCompiler.prototype.compileTypesSync = function () {\n            var _this = this;\n            // Compile all queued components, directives, pipes.\n            var needsAsyncResources = false;\n            this.pendingComponents.forEach(function (declaration) {\n                needsAsyncResources = needsAsyncResources || isComponentDefPendingResolution(declaration);\n                var metadata = _this.resolvers.component.resolve(declaration);\n                if (metadata === null) {\n                    throw invalidTypeError(declaration.name, 'Component');\n                }\n                _this.maybeStoreNgDef(core.ɵNG_COMP_DEF, declaration);\n                core.ɵcompileComponent(declaration, metadata);\n            });\n            this.pendingComponents.clear();\n            this.pendingDirectives.forEach(function (declaration) {\n                var metadata = _this.resolvers.directive.resolve(declaration);\n                if (metadata === null) {\n                    throw invalidTypeError(declaration.name, 'Directive');\n                }\n                _this.maybeStoreNgDef(core.ɵNG_DIR_DEF, declaration);\n                core.ɵcompileDirective(declaration, metadata);\n            });\n            this.pendingDirectives.clear();\n            this.pendingPipes.forEach(function (declaration) {\n                var metadata = _this.resolvers.pipe.resolve(declaration);\n                if (metadata === null) {\n                    throw invalidTypeError(declaration.name, 'Pipe');\n                }\n                _this.maybeStoreNgDef(core.ɵNG_PIPE_DEF, declaration);\n                core.ɵcompilePipe(declaration, metadata);\n            });\n            this.pendingPipes.clear();\n            return needsAsyncResources;\n        };\n        R3TestBedCompiler.prototype.applyTransitiveScopes = function () {\n            var _this = this;\n            if (this.overriddenModules.size > 0) {\n                // Module overrides (via `TestBed.overrideModule`) might affect scopes that were previously\n                // calculated and stored in `transitiveCompileScopes`. If module overrides are present,\n                // collect all affected modules and reset scopes to force their re-calculatation.\n                var testingModuleDef = this.testModuleType[core.ɵNG_MOD_DEF];\n                var affectedModules = this.collectModulesAffectedByOverrides(testingModuleDef.imports);\n                if (affectedModules.size > 0) {\n                    affectedModules.forEach(function (moduleType) {\n                        _this.storeFieldOfDefOnType(moduleType, core.ɵNG_MOD_DEF, 'transitiveCompileScopes');\n                        moduleType[core.ɵNG_MOD_DEF].transitiveCompileScopes = null;\n                    });\n                }\n            }\n            var moduleToScope = new Map();\n            var getScopeOfModule = function (moduleType) {\n                if (!moduleToScope.has(moduleType)) {\n                    var isTestingModule = isTestingModuleOverride(moduleType);\n                    var realType = isTestingModule ? _this.testModuleType : moduleType;\n                    moduleToScope.set(moduleType, core.ɵtransitiveScopesFor(realType));\n                }\n                return moduleToScope.get(moduleType);\n            };\n            this.componentToModuleScope.forEach(function (moduleType, componentType) {\n                var moduleScope = getScopeOfModule(moduleType);\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'directiveDefs');\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'pipeDefs');\n                // `tView` that is stored on component def contains information about directives and pipes\n                // that are in the scope of this component. Patching component scope will cause `tView` to be\n                // changed. Store original `tView` before patching scope, so the `tView` (including scope\n                // information) is restored back to its previous/original state before running next test.\n                _this.storeFieldOfDefOnType(componentType, core.ɵNG_COMP_DEF, 'tView');\n                core.ɵpatchComponentDefWithScope(componentType.ɵcmp, moduleScope);\n            });\n            this.componentToModuleScope.clear();\n        };\n        R3TestBedCompiler.prototype.applyProviderOverrides = function () {\n            var _this = this;\n            var maybeApplyOverrides = function (field) { return function (type) {\n                var resolver = field === core.ɵNG_COMP_DEF ? _this.resolvers.component : _this.resolvers.directive;\n                var metadata = resolver.resolve(type);\n                if (_this.hasProviderOverrides(metadata.providers)) {\n                    _this.patchDefWithProviderOverrides(type, field);\n                }\n            }; };\n            this.seenComponents.forEach(maybeApplyOverrides(core.ɵNG_COMP_DEF));\n            this.seenDirectives.forEach(maybeApplyOverrides(core.ɵNG_DIR_DEF));\n            this.seenComponents.clear();\n            this.seenDirectives.clear();\n        };\n        R3TestBedCompiler.prototype.applyProviderOverridesToModule = function (moduleType) {\n            var e_1, _a, e_2, _b;\n            if (this.moduleProvidersOverridden.has(moduleType)) {\n                return;\n            }\n            this.moduleProvidersOverridden.add(moduleType);\n            var injectorDef = moduleType[core.ɵNG_INJ_DEF];\n            if (this.providerOverridesByToken.size > 0) {\n                var providers = __spread(injectorDef.providers, (this.providerOverridesByModule.get(moduleType) || []));\n                if (this.hasProviderOverrides(providers)) {\n                    this.maybeStoreNgDef(core.ɵNG_INJ_DEF, moduleType);\n                    this.storeFieldOfDefOnType(moduleType, core.ɵNG_INJ_DEF, 'providers');\n                    injectorDef.providers = this.getOverriddenProviders(providers);\n                }\n                // Apply provider overrides to imported modules recursively\n                var moduleDef = moduleType[core.ɵNG_MOD_DEF];\n                var imports = maybeUnwrapFn(moduleDef.imports);\n                try {\n                    for (var imports_1 = __values(imports), imports_1_1 = imports_1.next(); !imports_1_1.done; imports_1_1 = imports_1.next()) {\n                        var importedModule = imports_1_1.value;\n                        this.applyProviderOverridesToModule(importedModule);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (imports_1_1 && !imports_1_1.done && (_a = imports_1.return)) _a.call(imports_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                try {\n                    // Also override the providers on any ModuleWithProviders imports since those don't appear in\n                    // the moduleDef.\n                    for (var _c = __values(flatten(injectorDef.imports)), _d = _c.next(); !_d.done; _d = _c.next()) {\n                        var importedModule = _d.value;\n                        if (isModuleWithProviders(importedModule)) {\n                            this.defCleanupOps.push({\n                                object: importedModule,\n                                fieldName: 'providers',\n                                originalValue: importedModule.providers\n                            });\n                            importedModule.providers = this.getOverriddenProviders(importedModule.providers);\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        };\n        R3TestBedCompiler.prototype.patchComponentsWithExistingStyles = function () {\n            this.existingComponentStyles.forEach(function (styles, type) { return type[core.ɵNG_COMP_DEF].styles = styles; });\n            this.existingComponentStyles.clear();\n        };\n        R3TestBedCompiler.prototype.queueTypeArray = function (arr, moduleType) {\n            var e_3, _a;\n            try {\n                for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n                    var value = arr_1_1.value;\n                    if (Array.isArray(value)) {\n                        this.queueTypeArray(value, moduleType);\n                    }\n                    else {\n                        this.queueType(value, moduleType);\n                    }\n                }\n            }\n            catch (e_3_1) { e_3 = { error: e_3_1 }; }\n            finally {\n                try {\n                    if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n                }\n                finally { if (e_3) throw e_3.error; }\n            }\n        };\n        R3TestBedCompiler.prototype.recompileNgModule = function (ngModule, metadata) {\n            // Cache the initial ngModuleDef as it will be overwritten.\n            this.maybeStoreNgDef(core.ɵNG_MOD_DEF, ngModule);\n            this.maybeStoreNgDef(core.ɵNG_INJ_DEF, ngModule);\n            core.ɵcompileNgModuleDefs(ngModule, metadata);\n        };\n        R3TestBedCompiler.prototype.queueType = function (type, moduleType) {\n            var component = this.resolvers.component.resolve(type);\n            if (component) {\n                // Check whether a give Type has respective NG def (ɵcmp) and compile if def is\n                // missing. That might happen in case a class without any Angular decorators extends another\n                // class where Component/Directive/Pipe decorator is defined.\n                if (isComponentDefPendingResolution(type) || !type.hasOwnProperty(core.ɵNG_COMP_DEF)) {\n                    this.pendingComponents.add(type);\n                }\n                this.seenComponents.add(type);\n                // Keep track of the module which declares this component, so later the component's scope\n                // can be set correctly. If the component has already been recorded here, then one of several\n                // cases is true:\n                // * the module containing the component was imported multiple times (common).\n                // * the component is declared in multiple modules (which is an error).\n                // * the component was in 'declarations' of the testing module, and also in an imported module\n                //   in which case the module scope will be TestingModuleOverride.DECLARATION.\n                // * overrideTemplateUsingTestingModule was called for the component in which case the module\n                //   scope will be TestingModuleOverride.OVERRIDE_TEMPLATE.\n                //\n                // If the component was previously in the testing module's 'declarations' (meaning the\n                // current value is TestingModuleOverride.DECLARATION), then `moduleType` is the component's\n                // real module, which was imported. This pattern is understood to mean that the component\n                // should use its original scope, but that the testing module should also contain the\n                // component in its scope.\n                if (!this.componentToModuleScope.has(type) ||\n                    this.componentToModuleScope.get(type) === TestingModuleOverride.DECLARATION) {\n                    this.componentToModuleScope.set(type, moduleType);\n                }\n                return;\n            }\n            var directive = this.resolvers.directive.resolve(type);\n            if (directive) {\n                if (!type.hasOwnProperty(core.ɵNG_DIR_DEF)) {\n                    this.pendingDirectives.add(type);\n                }\n                this.seenDirectives.add(type);\n                return;\n            }\n            var pipe = this.resolvers.pipe.resolve(type);\n            if (pipe && !type.hasOwnProperty(core.ɵNG_PIPE_DEF)) {\n                this.pendingPipes.add(type);\n                return;\n            }\n        };\n        R3TestBedCompiler.prototype.queueTypesFromModulesArray = function (arr) {\n            var _this = this;\n            // Because we may encounter the same NgModule while processing the imports and exports of an\n            // NgModule tree, we cache them in this set so we can skip ones that have already been seen\n            // encountered. In some test setups, this caching resulted in 10X runtime improvement.\n            var processedNgModuleDefs = new Set();\n            var queueTypesFromModulesArrayRecur = function (arr) {\n                var e_4, _a;\n                try {\n                    for (var arr_2 = __values(arr), arr_2_1 = arr_2.next(); !arr_2_1.done; arr_2_1 = arr_2.next()) {\n                        var value = arr_2_1.value;\n                        if (Array.isArray(value)) {\n                            queueTypesFromModulesArrayRecur(value);\n                        }\n                        else if (hasNgModuleDef(value)) {\n                            var def = value.ɵmod;\n                            if (processedNgModuleDefs.has(def)) {\n                                continue;\n                            }\n                            processedNgModuleDefs.add(def);\n                            // Look through declarations, imports, and exports, and queue\n                            // everything found there.\n                            _this.queueTypeArray(maybeUnwrapFn(def.declarations), value);\n                            queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.imports));\n                            queueTypesFromModulesArrayRecur(maybeUnwrapFn(def.exports));\n                        }\n                    }\n                }\n                catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                finally {\n                    try {\n                        if (arr_2_1 && !arr_2_1.done && (_a = arr_2.return)) _a.call(arr_2);\n                    }\n                    finally { if (e_4) throw e_4.error; }\n                }\n            };\n            queueTypesFromModulesArrayRecur(arr);\n        };\n        // When module overrides (via `TestBed.overrideModule`) are present, it might affect all modules\n        // that import (even transitively) an overridden one. For all affected modules we need to\n        // recalculate their scopes for a given test run and restore original scopes at the end. The goal\n        // of this function is to collect all affected modules in a set for further processing. Example:\n        // if we have the following module hierarchy: A -> B -> C (where `->` means `imports`) and module\n        // `C` is overridden, we consider `A` and `B` as affected, since their scopes might become\n        // invalidated with the override.\n        R3TestBedCompiler.prototype.collectModulesAffectedByOverrides = function (arr) {\n            var _this = this;\n            var seenModules = new Set();\n            var affectedModules = new Set();\n            var calcAffectedModulesRecur = function (arr, path) {\n                var e_5, _a;\n                try {\n                    for (var arr_3 = __values(arr), arr_3_1 = arr_3.next(); !arr_3_1.done; arr_3_1 = arr_3.next()) {\n                        var value = arr_3_1.value;\n                        if (Array.isArray(value)) {\n                            // If the value is an array, just flatten it (by invoking this function recursively),\n                            // keeping \"path\" the same.\n                            calcAffectedModulesRecur(value, path);\n                        }\n                        else if (hasNgModuleDef(value)) {\n                            if (seenModules.has(value)) {\n                                // If we've seen this module before and it's included into \"affected modules\" list, mark\n                                // the whole path that leads to that module as affected, but do not descend into its\n                                // imports, since we already examined them before.\n                                if (affectedModules.has(value)) {\n                                    path.forEach(function (item) { return affectedModules.add(item); });\n                                }\n                                continue;\n                            }\n                            seenModules.add(value);\n                            if (_this.overriddenModules.has(value)) {\n                                path.forEach(function (item) { return affectedModules.add(item); });\n                            }\n                            // Examine module imports recursively to look for overridden modules.\n                            var moduleDef = value[core.ɵNG_MOD_DEF];\n                            calcAffectedModulesRecur(maybeUnwrapFn(moduleDef.imports), path.concat(value));\n                        }\n                    }\n                }\n                catch (e_5_1) { e_5 = { error: e_5_1 }; }\n                finally {\n                    try {\n                        if (arr_3_1 && !arr_3_1.done && (_a = arr_3.return)) _a.call(arr_3);\n                    }\n                    finally { if (e_5) throw e_5.error; }\n                }\n            };\n            calcAffectedModulesRecur(arr, []);\n            return affectedModules;\n        };\n        R3TestBedCompiler.prototype.maybeStoreNgDef = function (prop, type) {\n            if (!this.initialNgDefs.has(type)) {\n                var currentDef = Object.getOwnPropertyDescriptor(type, prop);\n                this.initialNgDefs.set(type, [prop, currentDef]);\n            }\n        };\n        R3TestBedCompiler.prototype.storeFieldOfDefOnType = function (type, defField, fieldName) {\n            var def = type[defField];\n            var originalValue = def[fieldName];\n            this.defCleanupOps.push({ object: def, fieldName: fieldName, originalValue: originalValue });\n        };\n        /**\n         * Clears current components resolution queue, but stores the state of the queue, so we can\n         * restore it later. Clearing the queue is required before we try to compile components (via\n         * `TestBed.compileComponents`), so that component defs are in sync with the resolution queue.\n         */\n        R3TestBedCompiler.prototype.clearComponentResolutionQueue = function () {\n            var _this = this;\n            if (this.originalComponentResolutionQueue === null) {\n                this.originalComponentResolutionQueue = new Map();\n            }\n            clearResolutionOfComponentResourcesQueue().forEach(function (value, key) { return _this.originalComponentResolutionQueue.set(key, value); });\n        };\n        /*\n         * Restores component resolution queue to the previously saved state. This operation is performed\n         * as a part of restoring the state after completion of the current set of tests (that might\n         * potentially mutate the state).\n         */\n        R3TestBedCompiler.prototype.restoreComponentResolutionQueue = function () {\n            if (this.originalComponentResolutionQueue !== null) {\n                restoreComponentResolutionQueue(this.originalComponentResolutionQueue);\n                this.originalComponentResolutionQueue = null;\n            }\n        };\n        R3TestBedCompiler.prototype.restoreOriginalState = function () {\n            // Process cleanup ops in reverse order so the field's original value is restored correctly (in\n            // case there were multiple overrides for the same field).\n            forEachRight(this.defCleanupOps, function (op) {\n                op.object[op.fieldName] = op.originalValue;\n            });\n            // Restore initial component/directive/pipe defs\n            this.initialNgDefs.forEach(function (value, type) {\n                var _a = __read(value, 2), prop = _a[0], descriptor = _a[1];\n                if (!descriptor) {\n                    // Delete operations are generally undesirable since they have performance implications\n                    // on objects they were applied to. In this particular case, situations where this code\n                    // is invoked should be quite rare to cause any noticeable impact, since it's applied\n                    // only to some test cases (for example when class with no annotations extends some\n                    // @Component) when we need to clear 'ɵcmp' field on a given class to restore\n                    // its original state (before applying overrides and running tests).\n                    delete type[prop];\n                }\n                else {\n                    Object.defineProperty(type, prop, descriptor);\n                }\n            });\n            this.initialNgDefs.clear();\n            this.moduleProvidersOverridden.clear();\n            this.restoreComponentResolutionQueue();\n            // Restore the locale ID to the default value, this shouldn't be necessary but we never know\n            core.ɵsetLocaleId(core.ɵDEFAULT_LOCALE_ID);\n        };\n        R3TestBedCompiler.prototype.compileTestModule = function () {\n            var _this = this;\n            var RootScopeModule = /** @class */ (function () {\n                function RootScopeModule() {\n                }\n                return RootScopeModule;\n            }());\n            core.ɵcompileNgModuleDefs(RootScopeModule, {\n                providers: __spread(this.rootProviderOverrides),\n            });\n            var ngZone = new core.NgZone({ enableLongStackTrace: true });\n            var providers = __spread([\n                { provide: core.NgZone, useValue: ngZone },\n                { provide: core.Compiler, useFactory: function () { return new R3TestCompiler(_this); } }\n            ], this.providers, this.providerOverrides);\n            var imports = [RootScopeModule, this.additionalModuleTypes, this.imports || []];\n            // clang-format off\n            core.ɵcompileNgModuleDefs(this.testModuleType, {\n                declarations: this.declarations,\n                imports: imports,\n                schemas: this.schemas,\n                providers: providers,\n            }, /* allowDuplicateDeclarationsInRoot */ true);\n            // clang-format on\n            this.applyProviderOverridesToModule(this.testModuleType);\n        };\n        Object.defineProperty(R3TestBedCompiler.prototype, \"injector\", {\n            get: function () {\n                if (this._injector !== null) {\n                    return this._injector;\n                }\n                var providers = [];\n                var compilerOptions = this.platform.injector.get(core.COMPILER_OPTIONS);\n                compilerOptions.forEach(function (opts) {\n                    if (opts.providers) {\n                        providers.push(opts.providers);\n                    }\n                });\n                if (this.compilerProviders !== null) {\n                    providers.push.apply(providers, __spread(this.compilerProviders));\n                }\n                // TODO(ocombe): make this work with an Injector directly instead of creating a module for it\n                var CompilerModule = /** @class */ (function () {\n                    function CompilerModule() {\n                    }\n                    return CompilerModule;\n                }());\n                core.ɵcompileNgModuleDefs(CompilerModule, { providers: providers });\n                var CompilerModuleFactory = new core.ɵNgModuleFactory(CompilerModule);\n                this._injector = CompilerModuleFactory.create(this.platform.injector).injector;\n                return this._injector;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        // get overrides for a specific provider (if any)\n        R3TestBedCompiler.prototype.getSingleProviderOverrides = function (provider) {\n            var token = getProviderToken(provider);\n            return this.providerOverridesByToken.get(token) || null;\n        };\n        R3TestBedCompiler.prototype.getProviderOverrides = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n                return [];\n            // There are two flattening operations here. The inner flatten() operates on the metadata's\n            // providers and applies a mapping function which retrieves overrides for each incoming\n            // provider. The outer flatten() then flattens the produced overrides array. If this is not\n            // done, the array can contain other empty arrays (e.g. `[[], []]`) which leak into the\n            // providers array and contaminate any error messages that might be generated.\n            return flatten(flatten(providers, function (provider) { return _this.getSingleProviderOverrides(provider) || []; }));\n        };\n        R3TestBedCompiler.prototype.getOverriddenProviders = function (providers) {\n            var _this = this;\n            if (!providers || !providers.length || this.providerOverridesByToken.size === 0)\n                return [];\n            var flattenedProviders = flatten(providers);\n            var overrides = this.getProviderOverrides(flattenedProviders);\n            var overriddenProviders = __spread(flattenedProviders, overrides);\n            var final = [];\n            var seenOverriddenProviders = new Set();\n            // We iterate through the list of providers in reverse order to make sure provider overrides\n            // take precedence over the values defined in provider list. We also filter out all providers\n            // that have overrides, keeping overridden values only. This is needed, since presence of a\n            // provider with `ngOnDestroy` hook will cause this hook to be registered and invoked later.\n            forEachRight(overriddenProviders, function (provider) {\n                var token = getProviderToken(provider);\n                if (_this.providerOverridesByToken.has(token)) {\n                    if (!seenOverriddenProviders.has(token)) {\n                        seenOverriddenProviders.add(token);\n                        // Treat all overridden providers as `{multi: false}` (even if it's a multi-provider) to\n                        // make sure that provided override takes highest precedence and is not combined with\n                        // other instances of the same multi provider.\n                        final.unshift(Object.assign(Object.assign({}, provider), { multi: false }));\n                    }\n                }\n                else {\n                    final.unshift(provider);\n                }\n            });\n            return final;\n        };\n        R3TestBedCompiler.prototype.hasProviderOverrides = function (providers) {\n            return this.getProviderOverrides(providers).length > 0;\n        };\n        R3TestBedCompiler.prototype.patchDefWithProviderOverrides = function (declaration, field) {\n            var _this = this;\n            var def = declaration[field];\n            if (def && def.providersResolver) {\n                this.maybeStoreNgDef(field, declaration);\n                var resolver_1 = def.providersResolver;\n                var processProvidersFn_1 = function (providers) { return _this.getOverriddenProviders(providers); };\n                this.storeFieldOfDefOnType(declaration, field, 'providersResolver');\n                def.providersResolver = function (ngDef) { return resolver_1(ngDef, processProvidersFn_1); };\n            }\n        };\n        return R3TestBedCompiler;\n    }());\n    function initResolvers() {\n        return {\n            module: new NgModuleResolver(),\n            component: new ComponentResolver(),\n            directive: new DirectiveResolver(),\n            pipe: new PipeResolver()\n        };\n    }\n    function hasNgModuleDef(value) {\n        return value.hasOwnProperty('ɵmod');\n    }\n    function maybeUnwrapFn(maybeFn) {\n        return maybeFn instanceof Function ? maybeFn() : maybeFn;\n    }\n    function flatten(values, mapFn) {\n        var out = [];\n        values.forEach(function (value) {\n            if (Array.isArray(value)) {\n                out.push.apply(out, __spread(flatten(value, mapFn)));\n            }\n            else {\n                out.push(mapFn ? mapFn(value) : value);\n            }\n        });\n        return out;\n    }\n    function getProviderField(provider, field) {\n        return provider && typeof provider === 'object' && provider[field];\n    }\n    function getProviderToken(provider) {\n        return getProviderField(provider, 'provide') || provider;\n    }\n    function isModuleWithProviders(value) {\n        return value.hasOwnProperty('ngModule');\n    }\n    function forEachRight(values, fn) {\n        for (var idx = values.length - 1; idx >= 0; idx--) {\n            fn(values[idx], idx);\n        }\n    }\n    function invalidTypeError(name, expectedType) {\n        return new Error(name + \" class doesn't have @\" + expectedType + \" decorator or is missing metadata.\");\n    }\n    var R3TestCompiler = /** @class */ (function () {\n        function R3TestCompiler(testBed) {\n            this.testBed = testBed;\n        }\n        R3TestCompiler.prototype.compileModuleSync = function (moduleType) {\n            this.testBed._compileNgModuleSync(moduleType);\n            return new core.ɵNgModuleFactory(moduleType);\n        };\n        R3TestCompiler.prototype.compileModuleAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.testBed._compileNgModuleAsync(moduleType)];\n                        case 1:\n                            _a.sent();\n                            return [2 /*return*/, new core.ɵNgModuleFactory(moduleType)];\n                    }\n                });\n            });\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsSync = function (moduleType) {\n            var ngModuleFactory = this.compileModuleSync(moduleType);\n            var componentFactories = this.testBed._getComponentFactories(moduleType);\n            return new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories);\n        };\n        R3TestCompiler.prototype.compileModuleAndAllComponentsAsync = function (moduleType) {\n            return __awaiter(this, void 0, void 0, function () {\n                var ngModuleFactory, componentFactories;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, this.compileModuleAsync(moduleType)];\n                        case 1:\n                            ngModuleFactory = _a.sent();\n                            componentFactories = this.testBed._getComponentFactories(moduleType);\n                            return [2 /*return*/, new core.ModuleWithComponentFactories(ngModuleFactory, componentFactories)];\n                    }\n                });\n            });\n        };\n        R3TestCompiler.prototype.clearCache = function () { };\n        R3TestCompiler.prototype.clearCacheFor = function (type) { };\n        R3TestCompiler.prototype.getModuleId = function (moduleType) {\n            var meta = this.testBed._getModuleResolver().resolve(moduleType);\n            return meta && meta.id || undefined;\n        };\n        return R3TestCompiler;\n    }());\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    /**\n     * An abstract class for inserting the root test component element in a platform independent way.\n     *\n     * @publicApi\n     */\n    var TestComponentRenderer = /** @class */ (function () {\n        function TestComponentRenderer() {\n        }\n        TestComponentRenderer.prototype.insertRootElement = function (rootElementId) { };\n        return TestComponentRenderer;\n    }());\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureAutoDetect = new core.InjectionToken('ComponentFixtureAutoDetect');\n    /**\n     * @publicApi\n     */\n    var ComponentFixtureNoNgZone = new core.InjectionToken('ComponentFixtureNoNgZone');\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _nextRootElementId = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * TestBed is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedRender3 = /** @class */ (function () {\n        function TestBedRender3() {\n            // Properties\n            this.platform = null;\n            this.ngModule = null;\n            this._compiler = null;\n            this._testModuleRef = null;\n            this._activeFixtures = [];\n            this._globalCompilationChecked = false;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedRender3();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.resetTestEnvironment = function () {\n            _getTestBedRender3().resetTestEnvironment();\n        };\n        TestBedRender3.configureCompiler = function (config) {\n            _getTestBedRender3().configureCompiler(config);\n            return TestBedRender3;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedRender3.configureTestingModule = function (moduleDef) {\n            _getTestBedRender3().configureTestingModule(moduleDef);\n            return TestBedRender3;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedRender3.compileComponents = function () {\n            return _getTestBedRender3().compileComponents();\n        };\n        TestBedRender3.overrideModule = function (ngModule, override) {\n            _getTestBedRender3().overrideModule(ngModule, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideComponent = function (component, override) {\n            _getTestBedRender3().overrideComponent(component, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideDirective = function (directive, override) {\n            _getTestBedRender3().overrideDirective(directive, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overridePipe = function (pipe, override) {\n            _getTestBedRender3().overridePipe(pipe, override);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideTemplate = function (component, template) {\n            _getTestBedRender3().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedRender3;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedRender3.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedRender3().overrideTemplateUsingTestingModule(component, template);\n            return TestBedRender3;\n        };\n        TestBedRender3.overrideProvider = function (token, provider) {\n            _getTestBedRender3().overrideProvider(token, provider);\n            return TestBedRender3;\n        };\n        TestBedRender3.inject = function (token, notFoundValue, flags) {\n            return _getTestBedRender3().inject(token, notFoundValue, flags);\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedRender3.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return _getTestBedRender3().inject(token, notFoundValue, flags);\n        };\n        TestBedRender3.createComponent = function (component) {\n            return _getTestBedRender3().createComponent(component);\n        };\n        TestBedRender3.resetTestingModule = function () {\n            _getTestBedRender3().resetTestingModule();\n            return TestBedRender3;\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n        };\n        /**\n         * Reset the providers for the test injector.\n         *\n         * @publicApi\n         */\n        TestBedRender3.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this._compiler = null;\n            this.platform = null;\n            this.ngModule = null;\n        };\n        TestBedRender3.prototype.resetTestingModule = function () {\n            this.checkGlobalCompilationFinished();\n            core.ɵresetCompiledComponents();\n            if (this._compiler !== null) {\n                this.compiler.restoreOriginalState();\n            }\n            this._compiler = new R3TestBedCompiler(this.platform, this.ngModule);\n            this._testModuleRef = null;\n            this.destroyActiveFixtures();\n        };\n        TestBedRender3.prototype.configureCompiler = function (config) {\n            if (config.useJit != null) {\n                throw new Error('the Render3 compiler JiT mode is not configurable !');\n            }\n            if (config.providers !== undefined) {\n                this.compiler.setCompilerProviders(config.providers);\n            }\n        };\n        TestBedRender3.prototype.configureTestingModule = function (moduleDef) {\n            this.assertNotInstantiated('R3TestBed.configureTestingModule', 'configure the test module');\n            this.compiler.configureTestingModule(moduleDef);\n        };\n        TestBedRender3.prototype.compileComponents = function () {\n            return this.compiler.compileComponents();\n        };\n        TestBedRender3.prototype.inject = function (token, notFoundValue, flags) {\n            if (token === TestBedRender3) {\n                return this;\n            }\n            var UNDEFINED = {};\n            var result = this.testModuleRef.injector.get(token, UNDEFINED, flags);\n            return result === UNDEFINED ? this.compiler.injector.get(token, notFoundValue, flags) :\n                result;\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedRender3.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return this.inject(token, notFoundValue, flags);\n        };\n        TestBedRender3.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            var params = tokens.map(function (t) { return _this.inject(t); });\n            return fn.apply(context, params);\n        };\n        TestBedRender3.prototype.overrideModule = function (ngModule, override) {\n            this.assertNotInstantiated('overrideModule', 'override module metadata');\n            this.compiler.overrideModule(ngModule, override);\n        };\n        TestBedRender3.prototype.overrideComponent = function (component, override) {\n            this.assertNotInstantiated('overrideComponent', 'override component metadata');\n            this.compiler.overrideComponent(component, override);\n        };\n        TestBedRender3.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this.assertNotInstantiated('R3TestBed.overrideTemplateUsingTestingModule', 'Cannot override template when the test module has already been instantiated');\n            this.compiler.overrideTemplateUsingTestingModule(component, template);\n        };\n        TestBedRender3.prototype.overrideDirective = function (directive, override) {\n            this.assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this.compiler.overrideDirective(directive, override);\n        };\n        TestBedRender3.prototype.overridePipe = function (pipe, override) {\n            this.assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this.compiler.overridePipe(pipe, override);\n        };\n        /**\n         * Overwrites all providers for the given token with the given provider definition.\n         */\n        TestBedRender3.prototype.overrideProvider = function (token, provider) {\n            this.compiler.overrideProvider(token, provider);\n        };\n        TestBedRender3.prototype.createComponent = function (type) {\n            var _this = this;\n            var testComponentRenderer = this.inject(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var componentDef = type.ɵcmp;\n            if (!componentDef) {\n                throw new Error(\"It looks like '\" + core.ɵstringify(type) + \"' has not been IVY compiled - it has no '\\u0275cmp' field\");\n            }\n            // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n            var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n            // TODO: Don't cast as `InjectionToken<boolean>`, proper type is boolean[]\n            var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.inject(core.NgZone, null);\n            var componentFactory = new core.ɵRender3ComponentFactory(componentDef);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this.testModuleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = ngZone ? ngZone.run(initComponent) : initComponent();\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        Object.defineProperty(TestBedRender3.prototype, \"compiler\", {\n            /**\n             * @internal strip this from published d.ts files due to\n             * https://github.com/microsoft/TypeScript/issues/36216\n             */\n            get: function () {\n                if (this._compiler === null) {\n                    throw new Error(\"Need to call TestBed.initTestEnvironment() first\");\n                }\n                return this._compiler;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(TestBedRender3.prototype, \"testModuleRef\", {\n            /**\n             * @internal strip this from published d.ts files due to\n             * https://github.com/microsoft/TypeScript/issues/36216\n             */\n            get: function () {\n                if (this._testModuleRef === null) {\n                    this._testModuleRef = this.compiler.finalize();\n                }\n                return this._testModuleRef;\n            },\n            enumerable: false,\n            configurable: true\n        });\n        TestBedRender3.prototype.assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._testModuleRef !== null) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        /**\n         * Check whether the module scoping queue should be flushed, and flush it if needed.\n         *\n         * When the TestBed is reset, it clears the JIT module compilation queue, cancelling any\n         * in-progress module compilation. This creates a potential hazard - the very first time the\n         * TestBed is initialized (or if it's reset without being initialized), there may be pending\n         * compilations of modules declared in global scope. These compilations should be finished.\n         *\n         * To ensure that globally declared modules have their components scoped properly, this function\n         * is called whenever TestBed is initialized or reset. The _first_ time that this happens, prior\n         * to any other operations, the scoping queue is flushed.\n         */\n        TestBedRender3.prototype.checkGlobalCompilationFinished = function () {\n            // Checking _testNgModuleRef is null should not be necessary, but is left in as an additional\n            // guard that compilations queued in tests (after instantiation) are never flushed accidentally.\n            if (!this._globalCompilationChecked && this._testModuleRef === null) {\n                core.ɵflushModuleScopingQueueAsMuchAsPossible();\n            }\n            this._globalCompilationChecked = true;\n        };\n        TestBedRender3.prototype.destroyActiveFixtures = function () {\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        return TestBedRender3;\n    }());\n    var testBed;\n    function _getTestBedRender3() {\n        return testBed = testBed || new TestBedRender3();\n    }\n\n    function unimplemented() {\n        throw Error('unimplemented');\n    }\n    /**\n     * Special interface to the compiler only used by testing\n     *\n     * @publicApi\n     */\n    var TestingCompiler = /** @class */ (function (_super) {\n        __extends(TestingCompiler, _super);\n        function TestingCompiler() {\n            return _super !== null && _super.apply(this, arguments) || this;\n        }\n        Object.defineProperty(TestingCompiler.prototype, \"injector\", {\n            get: function () {\n                throw unimplemented();\n            },\n            enumerable: false,\n            configurable: true\n        });\n        TestingCompiler.prototype.overrideModule = function (module, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideDirective = function (directive, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overrideComponent = function (component, overrides) {\n            throw unimplemented();\n        };\n        TestingCompiler.prototype.overridePipe = function (directive, overrides) {\n            throw unimplemented();\n        };\n        /**\n         * Allows to pass the compile summary from AOT compilation to the JIT compiler,\n         * so that it can use the code generated by AOT.\n         */\n        TestingCompiler.prototype.loadAotSummaries = function (summaries) {\n            throw unimplemented();\n        };\n        /**\n         * Gets the component factory for the given component.\n         * This assumes that the component has been compiled before calling this call using\n         * `compileModuleAndAllComponents*`.\n         */\n        TestingCompiler.prototype.getComponentFactory = function (component) {\n            throw unimplemented();\n        };\n        /**\n         * Returns the component type that is stored in the given error.\n         * This can be used for errors created by compileModule...\n         */\n        TestingCompiler.prototype.getComponentFromError = function (error) {\n            throw unimplemented();\n        };\n        return TestingCompiler;\n    }(core.Compiler));\n    TestingCompiler.decorators = [\n        { type: core.Injectable }\n    ];\n    /**\n     * A factory for creating a Compiler\n     *\n     * @publicApi\n     */\n    var TestingCompilerFactory = /** @class */ (function () {\n        function TestingCompilerFactory() {\n        }\n        return TestingCompilerFactory;\n    }());\n\n    var _nextRootElementId$1 = 0;\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     */\n    var TestBedViewEngine = /** @class */ (function () {\n        function TestBedViewEngine() {\n            this._instantiated = false;\n            this._compiler = null;\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._activeFixtures = [];\n            this._testEnvAotSummaries = function () { return []; };\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this.platform = null;\n            this.ngModule = null;\n        }\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            var testBed = _getTestBedViewEngine();\n            testBed.initTestEnvironment(ngModule, platform, aotSummaries);\n            return testBed;\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.resetTestEnvironment = function () {\n            _getTestBedViewEngine().resetTestEnvironment();\n        };\n        TestBedViewEngine.resetTestingModule = function () {\n            _getTestBedViewEngine().resetTestingModule();\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default compiler providers and settings\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureCompiler = function (config) {\n            _getTestBedViewEngine().configureCompiler(config);\n            return TestBedViewEngine;\n        };\n        /**\n         * Allows overriding default providers, directives, pipes, modules of the test injector,\n         * which are defined in test_injector.js\n         */\n        TestBedViewEngine.configureTestingModule = function (moduleDef) {\n            _getTestBedViewEngine().configureTestingModule(moduleDef);\n            return TestBedViewEngine;\n        };\n        /**\n         * Compile components with a `templateUrl` for the test's NgModule.\n         * It is necessary to call this function\n         * as fetching urls is asynchronous.\n         */\n        TestBedViewEngine.compileComponents = function () {\n            return getTestBed().compileComponents();\n        };\n        TestBedViewEngine.overrideModule = function (ngModule, override) {\n            _getTestBedViewEngine().overrideModule(ngModule, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideComponent = function (component, override) {\n            _getTestBedViewEngine().overrideComponent(component, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideDirective = function (directive, override) {\n            _getTestBedViewEngine().overrideDirective(directive, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overridePipe = function (pipe, override) {\n            _getTestBedViewEngine().overridePipe(pipe, override);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideTemplate = function (component, template) {\n            _getTestBedViewEngine().overrideComponent(component, { set: { template: template, templateUrl: null } });\n            return TestBedViewEngine;\n        };\n        /**\n         * Overrides the template of the given component, compiling the template\n         * in the context of the TestingModule.\n         *\n         * Note: This works for JIT and AOTed components as well.\n         */\n        TestBedViewEngine.overrideTemplateUsingTestingModule = function (component, template) {\n            _getTestBedViewEngine().overrideTemplateUsingTestingModule(component, template);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.overrideProvider = function (token, provider) {\n            _getTestBedViewEngine().overrideProvider(token, provider);\n            return TestBedViewEngine;\n        };\n        TestBedViewEngine.inject = function (token, notFoundValue, flags) {\n            return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedViewEngine.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return _getTestBedViewEngine().inject(token, notFoundValue, flags);\n        };\n        TestBedViewEngine.createComponent = function (component) {\n            return _getTestBedViewEngine().createComponent(component);\n        };\n        /**\n         * Initialize the environment for testing with a compiler factory, a PlatformRef, and an\n         * angular module. These are common to every test in the suite.\n         *\n         * This may only be called once, to set up the common providers for the current test\n         * suite on the current platform. If you absolutely need to change the providers,\n         * first use `resetTestEnvironment`.\n         *\n         * Test modules and platforms for individual platforms are available from\n         * '@angular/<platform_name>/testing'.\n         */\n        TestBedViewEngine.prototype.initTestEnvironment = function (ngModule, platform, aotSummaries) {\n            if (this.platform || this.ngModule) {\n                throw new Error('Cannot set base providers because it has already been called');\n            }\n            this.platform = platform;\n            this.ngModule = ngModule;\n            if (aotSummaries) {\n                this._testEnvAotSummaries = aotSummaries;\n            }\n        };\n        /**\n         * Reset the providers for the test injector.\n         */\n        TestBedViewEngine.prototype.resetTestEnvironment = function () {\n            this.resetTestingModule();\n            this.platform = null;\n            this.ngModule = null;\n            this._testEnvAotSummaries = function () { return []; };\n        };\n        TestBedViewEngine.prototype.resetTestingModule = function () {\n            core.ɵclearOverrides();\n            this._aotSummaries = [];\n            this._templateOverrides = [];\n            this._compiler = null;\n            this._moduleOverrides = [];\n            this._componentOverrides = [];\n            this._directiveOverrides = [];\n            this._pipeOverrides = [];\n            this._isRoot = true;\n            this._rootProviderOverrides = [];\n            this._moduleRef = null;\n            this._moduleFactory = null;\n            this._compilerOptions = [];\n            this._providers = [];\n            this._declarations = [];\n            this._imports = [];\n            this._schemas = [];\n            this._instantiated = false;\n            this._activeFixtures.forEach(function (fixture) {\n                try {\n                    fixture.destroy();\n                }\n                catch (e) {\n                    console.error('Error during cleanup of component', {\n                        component: fixture.componentInstance,\n                        stacktrace: e,\n                    });\n                }\n            });\n            this._activeFixtures = [];\n        };\n        TestBedViewEngine.prototype.configureCompiler = function (config) {\n            this._assertNotInstantiated('TestBed.configureCompiler', 'configure the compiler');\n            this._compilerOptions.push(config);\n        };\n        TestBedViewEngine.prototype.configureTestingModule = function (moduleDef) {\n            var _a, _b, _c, _d;\n            this._assertNotInstantiated('TestBed.configureTestingModule', 'configure the test module');\n            if (moduleDef.providers) {\n                (_a = this._providers).push.apply(_a, __spread(moduleDef.providers));\n            }\n            if (moduleDef.declarations) {\n                (_b = this._declarations).push.apply(_b, __spread(moduleDef.declarations));\n            }\n            if (moduleDef.imports) {\n                (_c = this._imports).push.apply(_c, __spread(moduleDef.imports));\n            }\n            if (moduleDef.schemas) {\n                (_d = this._schemas).push.apply(_d, __spread(moduleDef.schemas));\n            }\n            if (moduleDef.aotSummaries) {\n                this._aotSummaries.push(moduleDef.aotSummaries);\n            }\n        };\n        TestBedViewEngine.prototype.compileComponents = function () {\n            var _this = this;\n            if (this._moduleFactory || this._instantiated) {\n                return Promise.resolve(null);\n            }\n            var moduleType = this._createCompilerAndModule();\n            return this._compiler.compileModuleAndAllComponentsAsync(moduleType)\n                .then(function (moduleAndComponentFactories) {\n                _this._moduleFactory = moduleAndComponentFactories.ngModuleFactory;\n            });\n        };\n        TestBedViewEngine.prototype._initIfNeeded = function () {\n            var e_1, _a;\n            if (this._instantiated) {\n                return;\n            }\n            if (!this._moduleFactory) {\n                try {\n                    var moduleType = this._createCompilerAndModule();\n                    this._moduleFactory =\n                        this._compiler.compileModuleAndAllComponentsSync(moduleType).ngModuleFactory;\n                }\n                catch (e) {\n                    var errorCompType = this._compiler.getComponentFromError(e);\n                    if (errorCompType) {\n                        throw new Error(\"This test module uses the component \" + core.ɵstringify(errorCompType) + \" which is using a \\\"templateUrl\\\" or \\\"styleUrls\\\", but they were never compiled. \" +\n                            \"Please call \\\"TestBed.compileComponents\\\" before your test.\");\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n            try {\n                for (var _b = __values(this._templateOverrides), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var _d = _c.value, component = _d.component, templateOf = _d.templateOf;\n                    var compFactory = this._compiler.getComponentFactory(templateOf);\n                    core.ɵoverrideComponentView(component, compFactory);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            var ngZone = new core.NgZone({ enableLongStackTrace: true, shouldCoalesceEventChangeDetection: false });\n            var providers = [{ provide: core.NgZone, useValue: ngZone }];\n            var ngZoneInjector = core.Injector.create({\n                providers: providers,\n                parent: this.platform.injector,\n                name: this._moduleFactory.moduleType.name\n            });\n            this._moduleRef = this._moduleFactory.create(ngZoneInjector);\n            // ApplicationInitStatus.runInitializers() is marked @internal to core. So casting to any\n            // before accessing it.\n            this._moduleRef.injector.get(core.ApplicationInitStatus).runInitializers();\n            this._instantiated = true;\n        };\n        TestBedViewEngine.prototype._createCompilerAndModule = function () {\n            var e_2, _a;\n            var _this = this;\n            var providers = this._providers.concat([{ provide: TestBed, useValue: this }]);\n            var declarations = __spread(this._declarations, this._templateOverrides.map(function (entry) { return entry.templateOf; }));\n            var rootScopeImports = [];\n            var rootProviderOverrides = this._rootProviderOverrides;\n            if (this._isRoot) {\n                var RootScopeModule = /** @class */ (function () {\n                    function RootScopeModule() {\n                    }\n                    return RootScopeModule;\n                }());\n                RootScopeModule.decorators = [\n                    { type: core.NgModule, args: [{\n                                providers: __spread(rootProviderOverrides),\n                                jit: true,\n                            },] }\n                ];\n                rootScopeImports.push(RootScopeModule);\n            }\n            providers.push({ provide: core.ɵINJECTOR_SCOPE, useValue: this._isRoot ? 'root' : null });\n            var imports = [rootScopeImports, this.ngModule, this._imports];\n            var schemas = this._schemas;\n            var DynamicTestModule = /** @class */ (function () {\n                function DynamicTestModule() {\n                }\n                return DynamicTestModule;\n            }());\n            DynamicTestModule.decorators = [\n                { type: core.NgModule, args: [{ providers: providers, declarations: declarations, imports: imports, schemas: schemas, jit: true },] }\n            ];\n            var compilerFactory = this.platform.injector.get(TestingCompilerFactory);\n            this._compiler = compilerFactory.createTestingCompiler(this._compilerOptions);\n            try {\n                for (var _b = __values(__spread([this._testEnvAotSummaries], this._aotSummaries)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var summary = _c.value;\n                    this._compiler.loadAotSummaries(summary);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this._moduleOverrides.forEach(function (entry) { return _this._compiler.overrideModule(entry[0], entry[1]); });\n            this._componentOverrides.forEach(function (entry) { return _this._compiler.overrideComponent(entry[0], entry[1]); });\n            this._directiveOverrides.forEach(function (entry) { return _this._compiler.overrideDirective(entry[0], entry[1]); });\n            this._pipeOverrides.forEach(function (entry) { return _this._compiler.overridePipe(entry[0], entry[1]); });\n            return DynamicTestModule;\n        };\n        TestBedViewEngine.prototype._assertNotInstantiated = function (methodName, methodDescription) {\n            if (this._instantiated) {\n                throw new Error(\"Cannot \" + methodDescription + \" when the test module has already been instantiated. \" +\n                    (\"Make sure you are not using `inject` before `\" + methodName + \"`.\"));\n            }\n        };\n        TestBedViewEngine.prototype.inject = function (token, notFoundValue, flags) {\n            this._initIfNeeded();\n            if (token === TestBed) {\n                return this;\n            }\n            // Tests can inject things from the ng module and from the compiler,\n            // but the ng module can't inject things from the compiler and vice versa.\n            var UNDEFINED = {};\n            var result = this._moduleRef.injector.get(token, UNDEFINED, flags);\n            return result === UNDEFINED ? this._compiler.injector.get(token, notFoundValue, flags) :\n                result;\n        };\n        /** @deprecated from v9.0.0 use TestBed.inject */\n        TestBedViewEngine.prototype.get = function (token, notFoundValue, flags) {\n            if (notFoundValue === void 0) { notFoundValue = core.Injector.THROW_IF_NOT_FOUND; }\n            if (flags === void 0) { flags = core.InjectFlags.Default; }\n            return this.inject(token, notFoundValue, flags);\n        };\n        TestBedViewEngine.prototype.execute = function (tokens, fn, context) {\n            var _this = this;\n            this._initIfNeeded();\n            var params = tokens.map(function (t) { return _this.inject(t); });\n            return fn.apply(context, params);\n        };\n        TestBedViewEngine.prototype.overrideModule = function (ngModule, override) {\n            this._assertNotInstantiated('overrideModule', 'override module metadata');\n            this._moduleOverrides.push([ngModule, override]);\n        };\n        TestBedViewEngine.prototype.overrideComponent = function (component, override) {\n            this._assertNotInstantiated('overrideComponent', 'override component metadata');\n            this._componentOverrides.push([component, override]);\n        };\n        TestBedViewEngine.prototype.overrideDirective = function (directive, override) {\n            this._assertNotInstantiated('overrideDirective', 'override directive metadata');\n            this._directiveOverrides.push([directive, override]);\n        };\n        TestBedViewEngine.prototype.overridePipe = function (pipe, override) {\n            this._assertNotInstantiated('overridePipe', 'override pipe metadata');\n            this._pipeOverrides.push([pipe, override]);\n        };\n        TestBedViewEngine.prototype.overrideProvider = function (token, provider) {\n            this.overrideProviderImpl(token, provider);\n        };\n        TestBedViewEngine.prototype.overrideProviderImpl = function (token, provider, deprecated) {\n            if (deprecated === void 0) { deprecated = false; }\n            var def = null;\n            if (typeof token !== 'string' && (def = core.ɵgetInjectableDef(token)) && def.providedIn === 'root') {\n                if (provider.useFactory) {\n                    this._rootProviderOverrides.push({ provide: token, useFactory: provider.useFactory, deps: provider.deps || [] });\n                }\n                else {\n                    this._rootProviderOverrides.push({ provide: token, useValue: provider.useValue });\n                }\n            }\n            var flags = 0;\n            var value;\n            if (provider.useFactory) {\n                flags |= 1024 /* TypeFactoryProvider */;\n                value = provider.useFactory;\n            }\n            else {\n                flags |= 256 /* TypeValueProvider */;\n                value = provider.useValue;\n            }\n            var deps = (provider.deps || []).map(function (dep) {\n                var depFlags = 0 /* None */;\n                var depToken;\n                if (Array.isArray(dep)) {\n                    dep.forEach(function (entry) {\n                        if (entry instanceof core.Optional) {\n                            depFlags |= 2 /* Optional */;\n                        }\n                        else if (entry instanceof core.SkipSelf) {\n                            depFlags |= 1 /* SkipSelf */;\n                        }\n                        else {\n                            depToken = entry;\n                        }\n                    });\n                }\n                else {\n                    depToken = dep;\n                }\n                return [depFlags, depToken];\n            });\n            core.ɵoverrideProvider({ token: token, flags: flags, deps: deps, value: value, deprecatedBehavior: deprecated });\n        };\n        TestBedViewEngine.prototype.overrideTemplateUsingTestingModule = function (component, template) {\n            this._assertNotInstantiated('overrideTemplateUsingTestingModule', 'override template');\n            var OverrideComponent = /** @class */ (function () {\n                function OverrideComponent() {\n                }\n                return OverrideComponent;\n            }());\n            OverrideComponent.decorators = [\n                { type: core.Component, args: [{ selector: 'empty', template: template, jit: true },] }\n            ];\n            this._templateOverrides.push({ component: component, templateOf: OverrideComponent });\n        };\n        TestBedViewEngine.prototype.createComponent = function (component) {\n            var _this = this;\n            this._initIfNeeded();\n            var componentFactory = this._compiler.getComponentFactory(component);\n            if (!componentFactory) {\n                throw new Error(\"Cannot create the component \" + core.ɵstringify(component) + \" as it was not imported into the testing module!\");\n            }\n            // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n            var noNgZone = this.inject(ComponentFixtureNoNgZone, false);\n            // TODO: Don't cast as `InjectionToken<boolean>`, declared type is boolean[]\n            var autoDetect = this.inject(ComponentFixtureAutoDetect, false);\n            var ngZone = noNgZone ? null : this.inject(core.NgZone, null);\n            var testComponentRenderer = this.inject(TestComponentRenderer);\n            var rootElId = \"root\" + _nextRootElementId$1++;\n            testComponentRenderer.insertRootElement(rootElId);\n            var initComponent = function () {\n                var componentRef = componentFactory.create(core.Injector.NULL, [], \"#\" + rootElId, _this._moduleRef);\n                return new ComponentFixture(componentRef, ngZone, autoDetect);\n            };\n            var fixture = !ngZone ? initComponent() : ngZone.run(initComponent);\n            this._activeFixtures.push(fixture);\n            return fixture;\n        };\n        return TestBedViewEngine;\n    }());\n    /**\n     * @description\n     * Configures and initializes environment for unit testing and provides methods for\n     * creating components and services in unit tests.\n     *\n     * `TestBed` is the primary api for writing unit tests for Angular applications and libraries.\n     *\n     * Note: Use `TestBed` in tests. It will be set to either `TestBedViewEngine` or `TestBedRender3`\n     * according to the compiler used.\n     *\n     * @publicApi\n     */\n    var TestBed = core.ɵivyEnabled ? TestBedRender3 : TestBedViewEngine;\n    /**\n     * Returns a singleton of the applicable `TestBed`.\n     *\n     * It will be either an instance of `TestBedViewEngine` or `TestBedRender3`.\n     *\n     * @publicApi\n     */\n    var getTestBed = core.ɵivyEnabled ? _getTestBedRender3 : _getTestBedViewEngine;\n    var testBed$1;\n    function _getTestBedViewEngine() {\n        return testBed$1 = testBed$1 || new TestBedViewEngine();\n    }\n    /**\n     * Allows injecting dependencies in `beforeEach()` and `it()`.\n     *\n     * Example:\n     *\n     * ```\n     * beforeEach(inject([Dependency, AClass], (dep, object) => {\n     *   // some code that uses `dep` and `object`\n     *   // ...\n     * }));\n     *\n     * it('...', inject([AClass], (object) => {\n     *   object.doSomething();\n     *   expect(...);\n     * })\n     * ```\n     *\n     * Notes:\n     * - inject is currently a function because of some Traceur limitation the syntax should\n     * eventually\n     *   becomes `it('...', @Inject (object: AClass, async: AsyncTestCompleter) => { ... });`\n     *\n     * @publicApi\n     */\n    function inject(tokens, fn) {\n        var testBed = getTestBed();\n        if (tokens.indexOf(AsyncTestCompleter) >= 0) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var _this = this;\n                // Return an async test method that returns a Promise if AsyncTestCompleter is one of\n                // the injected tokens.\n                return testBed.compileComponents().then(function () {\n                    var completer = testBed.inject(AsyncTestCompleter);\n                    testBed.execute(tokens, fn, _this);\n                    return completer.promise;\n                });\n            };\n        }\n        else {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                return testBed.execute(tokens, fn, this);\n            };\n        }\n    }\n    /**\n     * @publicApi\n     */\n    var InjectSetupWrapper = /** @class */ (function () {\n        function InjectSetupWrapper(_moduleDef) {\n            this._moduleDef = _moduleDef;\n        }\n        InjectSetupWrapper.prototype._addModule = function () {\n            var moduleDef = this._moduleDef();\n            if (moduleDef) {\n                getTestBed().configureTestingModule(moduleDef);\n            }\n        };\n        InjectSetupWrapper.prototype.inject = function (tokens, fn) {\n            var self = this;\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                self._addModule();\n                return inject(tokens, fn).call(this);\n            };\n        };\n        return InjectSetupWrapper;\n    }());\n    function withModule(moduleDef, fn) {\n        if (fn) {\n            // Not using an arrow function to preserve context passed from call site\n            return function () {\n                var testBed = getTestBed();\n                if (moduleDef) {\n                    testBed.configureTestingModule(moduleDef);\n                }\n                return fn.apply(this);\n            };\n        }\n        return new InjectSetupWrapper(function () { return moduleDef; });\n    }\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var _global$1 = (typeof window === 'undefined' ? global : window);\n    // Reset the test providers and the fake async zone before each test.\n    if (_global$1.beforeEach) {\n        _global$1.beforeEach(function () {\n            TestBed.resetTestingModule();\n            resetFakeAsyncZone();\n        });\n    }\n    /**\n     * This API should be removed. But doing so seems to break `google3` and so it requires a bit of\n     * investigation.\n     *\n     * A work around is to mark it as `@codeGenApi` for now and investigate later.\n     *\n     * @codeGenApi\n     */\n    // TODO(iminar): Remove this code in a safe way.\n    var __core_private_testing_placeholder__ = '';\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    // This file only reexports content of the `src` folder. Keep it that way.\n\n    /**\n     * @license\n     * Copyright Google LLC All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ComponentFixture = ComponentFixture;\n    exports.ComponentFixtureAutoDetect = ComponentFixtureAutoDetect;\n    exports.ComponentFixtureNoNgZone = ComponentFixtureNoNgZone;\n    exports.InjectSetupWrapper = InjectSetupWrapper;\n    exports.TestBed = TestBed;\n    exports.TestComponentRenderer = TestComponentRenderer;\n    exports.__core_private_testing_placeholder__ = __core_private_testing_placeholder__;\n    exports.async = async;\n    exports.discardPeriodicTasks = discardPeriodicTasks;\n    exports.fakeAsync = fakeAsync;\n    exports.flush = flush;\n    exports.flushMicrotasks = flushMicrotasks;\n    exports.getTestBed = getTestBed;\n    exports.inject = inject;\n    exports.resetFakeAsyncZone = resetFakeAsyncZone;\n    exports.tick = tick;\n    exports.waitForAsync = waitForAsync;\n    exports.withModule = withModule;\n    exports.ɵMetadataOverrider = MetadataOverrider;\n    exports.ɵTestingCompiler = TestingCompiler;\n    exports.ɵTestingCompilerFactory = TestingCompilerFactory;\n    exports.ɵangular_packages_core_testing_testing_a = TestBedViewEngine;\n    exports.ɵangular_packages_core_testing_testing_b = TestBedRender3;\n    exports.ɵangular_packages_core_testing_testing_c = _getTestBedRender3;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=core-testing.umd.js.map\n"]}