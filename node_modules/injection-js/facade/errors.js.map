{"version":3,"file":"errors.js","sourceRoot":"","sources":["../../lib/facade/errors.ts"],"names":[],"mappings":"AACA;;;;;;GAMG;AAEH,MAAM,CAAC,IAAM,UAAU,GAAG,QAAQ,CAAC;AACnC,MAAM,CAAC,IAAM,oBAAoB,GAAG,iBAAiB,CAAC;AACtD,MAAM,CAAC,IAAM,mBAAmB,GAAG,gBAAgB,CAAC;AACpD,MAAM,CAAC,IAAM,oBAAoB,GAAG,iBAAiB,CAAC;AACtD,MAAM,CAAC,IAAM,YAAY,GAAG,eAAe,CAAC;AAE5C,MAAM,UAAU,OAAO,CAAC,KAAY;IAClC,OAAQ,KAAa,CAAC,UAAU,CAAC,CAAC;AACpC,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,KAAY;IAC1C,OAAQ,KAAa,CAAC,mBAAmB,CAAC,CAAC;AAC7C,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,KAAY;IAC3C,OAAQ,KAAa,CAAC,oBAAoB,CAAC,CAAC;AAC9C,CAAC;AAED,SAAS,kBAAkB,CAAC,OAAgB;IAAE,gBAAgB;SAAhB,UAAgB,EAAhB,qBAAgB,EAAhB,IAAgB;QAAhB,+BAAgB;;IACtD,OAAO,CAAC,KAAK,OAAb,OAAO,EAAW,MAAM,EAAE;AAClC,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,KAAY;IACzC,OAAQ,KAAa,CAAC,YAAY,CAAC,IAAI,kBAAkB,CAAC;AAC5D,CAAC;AAED,MAAM,UAAU,YAAY,CAAC,OAAe,EAAE,aAAkB;IAC9D,IAAM,GAAG,GAAM,OAAO,qBAAe,aAAa,YAAY,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC,CAAC,aAAa,CAAE,CAAC;IAC9G,IAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;IACxB,KAAa,CAAC,oBAAoB,CAAC,GAAG,aAAa,CAAC;IACrD,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["import { DebugContext } from './lang';\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport const ERROR_TYPE = 'ngType';\nexport const ERROR_COMPONENT_TYPE = 'ngComponentType';\nexport const ERROR_DEBUG_CONTEXT = 'ngDebugContext';\nexport const ERROR_ORIGINAL_ERROR = 'ngOriginalError';\nexport const ERROR_LOGGER = 'ngErrorLogger';\n\nexport function getType(error: Error): Function {\n  return (error as any)[ERROR_TYPE];\n}\n\nexport function getDebugContext(error: Error): DebugContext {\n  return (error as any)[ERROR_DEBUG_CONTEXT];\n}\n\nexport function getOriginalError(error: Error): Error {\n  return (error as any)[ERROR_ORIGINAL_ERROR];\n}\n\nfunction defaultErrorLogger(console: Console, ...values: any[]) {\n  (<any>console.error)(...values);\n}\n\nexport function getErrorLogger(error: Error): (console: Console, ...values: any[]) => void {\n  return (error as any)[ERROR_LOGGER] || defaultErrorLogger;\n}\n\nexport function wrappedError(message: string, originalError: any): Error {\n  const msg = `${message} caused by: ${originalError instanceof Error ? originalError.message : originalError}`;\n  const error = Error(msg);\n  (error as any)[ERROR_ORIGINAL_ERROR] = originalError;\n  return error;\n}\n"]}